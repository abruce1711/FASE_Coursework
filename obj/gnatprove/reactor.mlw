(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "controlrods" defined at reactor.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Reactor__controlrods
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type controlrods =
  < range 0 5 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = controlrods, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type controlrods__ref =
  { mutable controlrods__content : controlrods }
 
 function controlrods__ref_controlrods__content__projection 
   (a : controlrods__ref) : controlrods =
  a.controlrods__content
 
 meta "model_projection" function controlrods__ref_controlrods__content__projection
 
 meta "inline:no" function controlrods__ref_controlrods__content__projection
 
 val controlrods__havoc 
   (x : controlrods__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "controlrods" defined at reactor.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Reactor__controlrods__rep
 use        Reactor__controlrods as Reactor__controlrods
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__controlrods.controlrods) : int =
  (Reactor__controlrods.controlrods'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__controlrods.controlrods, 
 predicate in_range = Reactor__controlrods.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "watersupply" defined at reactor.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Reactor__watersupply
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type watersupply =
  < range 0 100 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = watersupply, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type watersupply__ref =
  { mutable watersupply__content : watersupply }
 
 function watersupply__ref_watersupply__content__projection 
   (a : watersupply__ref) : watersupply =
  a.watersupply__content
 
 meta "model_projection" function watersupply__ref_watersupply__content__projection
 
 meta "inline:no" function watersupply__ref_watersupply__content__projection
 
 val watersupply__havoc 
   (x : watersupply__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "watersupply" defined at reactor.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Reactor__watersupply__rep
 use        Reactor__watersupply as Reactor__watersupply
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__watersupply.watersupply) : int =
  (Reactor__watersupply.watersupply'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__watersupply.watersupply, 
 predicate in_range = Reactor__watersupply.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "temperature" defined at reactor.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Reactor__temperature
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type temperature =
  < range 0 100 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (100 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = temperature, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type temperature__ref =
  { mutable temperature__content : temperature }
 
 function temperature__ref_temperature__content__projection 
   (a : temperature__ref) : temperature =
  a.temperature__content
 
 meta "model_projection" function temperature__ref_temperature__content__projection
 
 meta "inline:no" function temperature__ref_temperature__content__projection
 
 val temperature__havoc 
   (x : temperature__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "temperature" defined at reactor.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Reactor__temperature__rep
 use        Reactor__temperature as Reactor__temperature
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__temperature.temperature) : int =
  (Reactor__temperature.temperature'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__temperature.temperature, 
 predicate in_range = Reactor__temperature.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "temperatureincrease" defined at reactor.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Reactor__temperatureincrease
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type temperatureincrease =
  < range 0 5 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = temperatureincrease, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type temperatureincrease__ref =
  { mutable temperatureincrease__content : temperatureincrease }
 
 function temperatureincrease__ref_temperatureincrease__content__projection 
   (a : temperatureincrease__ref) : temperatureincrease =
  a.temperatureincrease__content
 
 meta "model_projection" function temperatureincrease__ref_temperatureincrease__content__projection
 
 meta "inline:no" function temperatureincrease__ref_temperatureincrease__content__projection
 
 val temperatureincrease__havoc 
   (x : temperatureincrease__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "temperatureincrease" defined at reactor.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Reactor__temperatureincrease__rep
 use        Reactor__temperatureincrease as Reactor__temperatureincrease
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__temperatureincrease.temperatureincrease) : int =
  (Reactor__temperatureincrease.temperatureincrease'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__temperatureincrease.temperatureincrease, 
 predicate in_range = Reactor__temperatureincrease.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "reactorpower" defined at reactor.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Reactor__reactorpower
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type reactorpower =
  < range 0 10 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = reactorpower, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reactorpower__ref =
  { mutable reactorpower__content : reactorpower }
 
 function reactorpower__ref_reactorpower__content__projection 
   (a : reactorpower__ref) : reactorpower =
  a.reactorpower__content
 
 meta "model_projection" function reactorpower__ref_reactorpower__content__projection
 
 meta "inline:no" function reactorpower__ref_reactorpower__content__projection
 
 val reactorpower__havoc 
   (x : reactorpower__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reactorpower" defined at reactor.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Reactor__reactorpower__rep
 use        Reactor__reactorpower as Reactor__reactorpower
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__reactorpower.reactorpower) : int =
  (Reactor__reactorpower.reactorpower'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__reactorpower.reactorpower, 
 predicate in_range = Reactor__reactorpower.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "electricity" defined at reactor.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Reactor__electricity
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type electricity =
  < range 0 200 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (200 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = electricity, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type electricity__ref =
  { mutable electricity__content : electricity }
 
 function electricity__ref_electricity__content__projection 
   (a : electricity__ref) : electricity =
  a.electricity__content
 
 meta "model_projection" function electricity__ref_electricity__content__projection
 
 meta "inline:no" function electricity__ref_electricity__content__projection
 
 val electricity__havoc 
   (x : electricity__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "electricity" defined at reactor.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Reactor__electricity__rep
 use        Reactor__electricity as Reactor__electricity
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Reactor__electricity.electricity) : int =
  (Reactor__electricity.electricity'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__electricity.electricity, 
 predicate in_range = Reactor__electricity.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "power" defined at reactor.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Reactor__power
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type power 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = power, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type power__ref =
  { mutable power__content : power }
 
 function power__ref_power__content__projection 
   (a : power__ref) : power =
  a.power__content
 
 meta "model_projection" function power__ref_power__content__projection
 
 meta "inline:no" function power__ref_power__content__projection
 
 val power__havoc 
   (x : power__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "power" defined at reactor.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Reactor__power__rep
 use        Reactor__power as Reactor__power
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Reactor__power.power, 
 predicate in_range = Reactor__power.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end
(* Module for defining a ref holding the value of variable "currentpowerstatus" defined at reactor.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__currentpowerstatus
 use        "_gnatprove_standard".Main
 use        "int".Int

 val currentpowerstatus [#"reactor.ads" 12 0 0][@model_trace:2780] [@name:currentPowerStatus] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "currentpowerstatus" defined at reactor.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__currentpowerstatus___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "currentrods" defined at reactor.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__currentrods
 use        "_gnatprove_standard".Main
 use        "int".Int

 val currentrods [#"reactor.ads" 13 0 0][@name:currentRods] [@model_projected] [@model_trace:2790]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "currentrods" defined at reactor.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__currentrods___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "currentwatersupply" defined at reactor.ads:14, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__currentwatersupply
 use        "_gnatprove_standard".Main
 use        "int".Int

 val currentwatersupply [#"reactor.ads" 14 0 0][@name:currentWaterSupply] [@model_projected] [@model_trace:2802]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "currentwatersupply" defined at reactor.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__currentwatersupply___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "currenttemperature" defined at reactor.ads:15, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__currenttemperature
 use        "_gnatprove_standard".Main
 use        "int".Int

 val currenttemperature [#"reactor.ads" 15 0 0][@name:currentTemperature] [@model_projected] [@model_trace:2814]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "currenttemperature" defined at reactor.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__currenttemperature___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "currenttemperatureincrease" defined at reactor.ads:16, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__currenttemperatureincrease
 use        "_gnatprove_standard".Main
 use        "int".Int

 val currenttemperatureincrease [#"reactor.ads" 16 0 0][@model_projected] [@model_trace:2826] [@name:currentTemperatureIncrease]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "currenttemperatureincrease" defined at reactor.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__currenttemperatureincrease___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "currentreactorpower" defined at reactor.ads:17, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__currentreactorpower
 use        "_gnatprove_standard".Main
 use        "int".Int

 val currentreactorpower [#"reactor.ads" 17 0 0][@name:currentReactorPower] [@model_trace:2836] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "currentreactorpower" defined at reactor.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__currentreactorpower___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "currentelectricityproduced" defined at reactor.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__currentelectricityproduced
 use        "_gnatprove_standard".Main
 use        "int".Int

 val currentelectricityproduced [#"reactor.ads" 18 0 0][@name:currentElectricityProduced] [@model_projected] [@model_trace:2846]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "currentelectricityproduced" defined at reactor.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__currentelectricityproduced___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "currentmaxelectricity" defined at reactor.ads:19, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__currentmaxelectricity
 use        "_gnatprove_standard".Main
 use        "int".Int

 val currentmaxelectricity [#"reactor.ads" 19 0 0][@model_projected] [@name:currentMaxElectricity] [@model_trace:2858]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "currentmaxelectricity" defined at reactor.ads:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__currentmaxelectricity___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "inputconst" defined at reactor.ads:20, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__inputconst
 use        "_gnatprove_standard".Main
 use        "int".Int

 val inputconst [#"reactor.ads" 20 0 0][@model_projected] [@name:InputConst] [@model_trace:2870]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "inputconst" defined at reactor.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__inputconst___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "temp" defined at reactor.ads:47, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__increasetemperature__temp
 use        "_gnatprove_standard".Main
 use        "int".Int

 val temp [#"reactor.ads" 47 0 0][@name:temp] [@model_projected] [@model_trace:3081]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "temp" defined at reactor.ads:47, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__increasetemperature__temp___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "temp" defined at reactor.ads:52, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__decreasetemperature__temp
 use        "_gnatprove_standard".Main
 use        "int".Int

 val temp [#"reactor.ads" 52 0 0][@name:temp] [@model_projected] [@model_trace:3126]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "temp" defined at reactor.ads:52, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__decreasetemperature__temp___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "elec" defined at reactor.ads:57, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__increaseelectricity__elec
 use        "_gnatprove_standard".Main
 use        "int".Int

 val elec [#"reactor.ads" 57 0 0][@name:elec] [@model_projected] [@model_trace:3169]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "elec" defined at reactor.ads:57, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__increaseelectricity__elec___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "reactorcheck" defined at reactor.ads:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__reactorcheck
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function reactorcheck 
   (reactor__currenttemperature : int) (reactor__currentwatersupply : int) : bool
 
 val predicate reactorcheck__function_guard 
   (temp___result_156 : bool) (reactor__currenttemperature : int) (reactor__currentwatersupply : int)

end

(* Module for possibly declaring a logic function for "reactoron" defined at reactor.ads:25, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__reactoron
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function reactoron 
   (reactor__currentpowerstatus : int) : bool
 
 val predicate reactoron__function_guard 
   (temp___result_157 : bool) (reactor__currentpowerstatus : int)

end

(* Module for possibly declaring a logic function for "startreactor" defined at reactor.ads:28, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__startreactor
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "stopreactor" defined at reactor.ads:32, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__stopreactor
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "removecontrolrod" defined at reactor.ads:37, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__removecontrolrod
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "addcontrolrod" defined at reactor.ads:42, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__addcontrolrod
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "increasetemperature" defined at reactor.ads:47, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__increasetemperature
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "decreasetemperature" defined at reactor.ads:52, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__decreasetemperature
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "increaseelectricity" defined at reactor.ads:57, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__increaseelectricity
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "decreasewatersupply" defined at reactor.ads:62, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__decreasewatersupply
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "fillwatersupply" defined at reactor.ads:67, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__fillwatersupply
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_162 : int) (temp___is_init_158 : bool) (temp___skip_constant_159 : bool) (temp___do_toplevel_160 : bool) (temp___do_typ_inv_161 : bool) =
  (if (( temp___is_init_158 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_162)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_162 : int) (temp___is_init_158 : bool) (temp___skip_constant_159 : bool) (temp___do_toplevel_160 : bool) (temp___do_typ_inv_161 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_162 : int) (temp___is_init_158 : bool) (temp___skip_constant_159 : bool) (temp___do_toplevel_160 : bool) (temp___do_typ_inv_161 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_163 : int) (temp___skip_top_level_164 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_163 : int) (temp___skip_top_level_164 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_163 : int) (temp___skip_top_level_164 : bool) }

end

(* Module giving axioms for type "controlrods" defined at reactor.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__controlrods___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__controlrods as Reactor__controlrods

 predicate dynamic_invariant [@inline] 
   (temp___expr_169 : int) (temp___is_init_165 : bool) (temp___skip_constant_166 : bool) (temp___do_toplevel_167 : bool) (temp___do_typ_inv_168 : bool) =
  (if (( temp___is_init_165 \/ (Reactor__controlrods.first <= Reactor__controlrods.last) )) then (
   (Reactor__controlrods.dynamic_property Reactor__controlrods.first Reactor__controlrods.last temp___expr_169)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_169 : int) (temp___is_init_165 : bool) (temp___skip_constant_166 : bool) (temp___do_toplevel_167 : bool) (temp___do_typ_inv_168 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_169 : int) (temp___is_init_165 : bool) (temp___skip_constant_166 : bool) (temp___do_toplevel_167 : bool) (temp___do_typ_inv_168 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_170 : int) (temp___skip_top_level_171 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_170 : int) (temp___skip_top_level_171 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_170 : int) (temp___skip_top_level_171 : bool) }

end

(* Module giving axioms for type "watersupply" defined at reactor.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__watersupply___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__watersupply as Reactor__watersupply

 predicate dynamic_invariant [@inline] 
   (temp___expr_176 : int) (temp___is_init_172 : bool) (temp___skip_constant_173 : bool) (temp___do_toplevel_174 : bool) (temp___do_typ_inv_175 : bool) =
  (if (( temp___is_init_172 \/ (Reactor__watersupply.first <= Reactor__watersupply.last) )) then (
   (Reactor__watersupply.dynamic_property Reactor__watersupply.first Reactor__watersupply.last temp___expr_176)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_176 : int) (temp___is_init_172 : bool) (temp___skip_constant_173 : bool) (temp___do_toplevel_174 : bool) (temp___do_typ_inv_175 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_176 : int) (temp___is_init_172 : bool) (temp___skip_constant_173 : bool) (temp___do_toplevel_174 : bool) (temp___do_typ_inv_175 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_177 : int) (temp___skip_top_level_178 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_177 : int) (temp___skip_top_level_178 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_177 : int) (temp___skip_top_level_178 : bool) }

end

(* Module giving axioms for type "temperature" defined at reactor.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__temperature___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__temperature as Reactor__temperature

 predicate dynamic_invariant [@inline] 
   (temp___expr_183 : int) (temp___is_init_179 : bool) (temp___skip_constant_180 : bool) (temp___do_toplevel_181 : bool) (temp___do_typ_inv_182 : bool) =
  (if (( temp___is_init_179 \/ (Reactor__temperature.first <= Reactor__temperature.last) )) then (
   (Reactor__temperature.dynamic_property Reactor__temperature.first Reactor__temperature.last temp___expr_183)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_183 : int) (temp___is_init_179 : bool) (temp___skip_constant_180 : bool) (temp___do_toplevel_181 : bool) (temp___do_typ_inv_182 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_183 : int) (temp___is_init_179 : bool) (temp___skip_constant_180 : bool) (temp___do_toplevel_181 : bool) (temp___do_typ_inv_182 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_184 : int) (temp___skip_top_level_185 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_184 : int) (temp___skip_top_level_185 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_184 : int) (temp___skip_top_level_185 : bool) }

end

(* Module giving axioms for type "temperatureincrease" defined at reactor.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__temperatureincrease___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__temperatureincrease as Reactor__temperatureincrease

 predicate dynamic_invariant [@inline] 
   (temp___expr_190 : int) (temp___is_init_186 : bool) (temp___skip_constant_187 : bool) (temp___do_toplevel_188 : bool) (temp___do_typ_inv_189 : bool) =
  (if (( temp___is_init_186 \/ (Reactor__temperatureincrease.first <= Reactor__temperatureincrease.last) )) then (
   (Reactor__temperatureincrease.dynamic_property Reactor__temperatureincrease.first Reactor__temperatureincrease.last temp___expr_190)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_190 : int) (temp___is_init_186 : bool) (temp___skip_constant_187 : bool) (temp___do_toplevel_188 : bool) (temp___do_typ_inv_189 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_190 : int) (temp___is_init_186 : bool) (temp___skip_constant_187 : bool) (temp___do_toplevel_188 : bool) (temp___do_typ_inv_189 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_191 : int) (temp___skip_top_level_192 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_191 : int) (temp___skip_top_level_192 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_191 : int) (temp___skip_top_level_192 : bool) }

end

(* Module giving axioms for type "reactorpower" defined at reactor.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__reactorpower___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__reactorpower as Reactor__reactorpower

 predicate dynamic_invariant [@inline] 
   (temp___expr_197 : int) (temp___is_init_193 : bool) (temp___skip_constant_194 : bool) (temp___do_toplevel_195 : bool) (temp___do_typ_inv_196 : bool) =
  (if (( temp___is_init_193 \/ (Reactor__reactorpower.first <= Reactor__reactorpower.last) )) then (
   (Reactor__reactorpower.dynamic_property Reactor__reactorpower.first Reactor__reactorpower.last temp___expr_197)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_197 : int) (temp___is_init_193 : bool) (temp___skip_constant_194 : bool) (temp___do_toplevel_195 : bool) (temp___do_typ_inv_196 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_197 : int) (temp___is_init_193 : bool) (temp___skip_constant_194 : bool) (temp___do_toplevel_195 : bool) (temp___do_typ_inv_196 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_198 : int) (temp___skip_top_level_199 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_198 : int) (temp___skip_top_level_199 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_198 : int) (temp___skip_top_level_199 : bool) }

end

(* Module giving axioms for type "electricity" defined at reactor.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__electricity___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__electricity as Reactor__electricity

 predicate dynamic_invariant [@inline] 
   (temp___expr_204 : int) (temp___is_init_200 : bool) (temp___skip_constant_201 : bool) (temp___do_toplevel_202 : bool) (temp___do_typ_inv_203 : bool) =
  (if (( temp___is_init_200 \/ (Reactor__electricity.first <= Reactor__electricity.last) )) then (
   (Reactor__electricity.dynamic_property Reactor__electricity.first Reactor__electricity.last temp___expr_204)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_204 : int) (temp___is_init_200 : bool) (temp___skip_constant_201 : bool) (temp___do_toplevel_202 : bool) (temp___do_typ_inv_203 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_204 : int) (temp___is_init_200 : bool) (temp___skip_constant_201 : bool) (temp___do_toplevel_202 : bool) (temp___do_typ_inv_203 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_205 : int) (temp___skip_top_level_206 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_205 : int) (temp___skip_top_level_206 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_205 : int) (temp___skip_top_level_206 : bool) }

end

(* Module giving axioms for type "power" defined at reactor.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__power___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__power as Reactor__power

 predicate dynamic_invariant [@inline] 
   (temp___expr_211 : int) (temp___is_init_207 : bool) (temp___skip_constant_208 : bool) (temp___do_toplevel_209 : bool) (temp___do_typ_inv_210 : bool) =
  (if (( temp___is_init_207 \/ (Reactor__power.first <= Reactor__power.last) )) then (
   (Reactor__power.dynamic_property Reactor__power.first Reactor__power.last temp___expr_211)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_211 : int) (temp___is_init_207 : bool) (temp___skip_constant_208 : bool) (temp___do_toplevel_209 : bool) (temp___do_typ_inv_210 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_211 : int) (temp___is_init_207 : bool) (temp___skip_constant_208 : bool) (temp___do_toplevel_209 : bool) (temp___do_typ_inv_210 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_212 : int) (temp___skip_top_level_213 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_212 : int) (temp___skip_top_level_213 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_212 : int) (temp___skip_top_level_213 : bool) }

end
(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module giving a program function and a defining axiom for the expression function "reactorcheck" defined at reactor.ads:22, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Reactor__reactorcheck___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__currentwatersupply as Reactor__currentwatersupply
 use        Reactor__currenttemperature as Reactor__currenttemperature
 use        Reactor__reactorcheck as Reactor__reactorcheck
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom

 val reactorcheck 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Reactor__reactorcheck.reactorcheck Reactor__currenttemperature.currenttemperature.int__content Reactor__currentwatersupply.currentwatersupply.int__content)) /\ (Reactor__reactorcheck.reactorcheck__function_guard result Reactor__currenttemperature.currenttemperature.int__content Reactor__currentwatersupply.currentwatersupply.int__content) )/\( (result = True) <-> ( (Reactor__currenttemperature.currenttemperature.int__content < (100 : int)) /\ (Reactor__currentwatersupply.currentwatersupply.int__content > (0 : int)) ) ) ) }
  reads {Reactor__currenttemperature.currenttemperature, Reactor__currentwatersupply.currentwatersupply}
 
 axiom reactorcheck__post_axiom :
  (forall reactor__currenttemperature   reactor__currentwatersupply   : int [(Reactor__reactorcheck.reactorcheck reactor__currenttemperature reactor__currentwatersupply)].
   ( ( (Reactor__temperature___axiom.dynamic_invariant reactor__currenttemperature True True True True) /\ (Reactor__watersupply___axiom.dynamic_invariant reactor__currentwatersupply True True True True) ) -> (let result = (Reactor__reactorcheck.reactorcheck reactor__currenttemperature reactor__currentwatersupply) in (
    (if ((Reactor__reactorcheck.reactorcheck__function_guard result reactor__currenttemperature reactor__currentwatersupply)) then (
     ( ( true /\ true )/\true )) else true)))
    ))
 
 axiom reactorcheck__def_axiom :
  (forall reactor__currenttemperature   reactor__currentwatersupply   : int [(Reactor__reactorcheck.reactorcheck reactor__currenttemperature reactor__currentwatersupply)].
   ( (let result = (Reactor__reactorcheck.reactorcheck reactor__currenttemperature reactor__currentwatersupply) in (
    (Reactor__reactorcheck.reactorcheck__function_guard result reactor__currenttemperature reactor__currentwatersupply)))
    -> ( ((Reactor__reactorcheck.reactorcheck reactor__currenttemperature reactor__currentwatersupply) = True) <-> ( (reactor__currenttemperature < (100 : int)) /\ (reactor__currentwatersupply > (0 : int)) ) ) ))

end

(* Module giving a program function and a defining axiom for the expression function "reactoron" defined at reactor.ads:25, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Reactor__reactoron___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__currentpowerstatus as Reactor__currentpowerstatus
 use        Reactor__reactoron as Reactor__reactoron
 use        Reactor__power___axiom as Reactor__power___axiom

 val reactoron 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Reactor__reactoron.reactoron Reactor__currentpowerstatus.currentpowerstatus.int__content)) /\ (Reactor__reactoron.reactoron__function_guard result Reactor__currentpowerstatus.currentpowerstatus.int__content) )/\( (result = True) <-> (Reactor__currentpowerstatus.currentpowerstatus.int__content = (0 : int)) ) ) }
  reads {Reactor__currentpowerstatus.currentpowerstatus}
 
 axiom reactoron__post_axiom :
  (forall reactor__currentpowerstatus   : int [(Reactor__reactoron.reactoron reactor__currentpowerstatus)].
   ( (Reactor__power___axiom.dynamic_invariant reactor__currentpowerstatus True True True True) -> (let result = (Reactor__reactoron.reactoron reactor__currentpowerstatus) in (
    (if ((Reactor__reactoron.reactoron__function_guard result reactor__currentpowerstatus)) then (
     ( ( true /\ true )/\true )) else true)))
    ))
 
 axiom reactoron__def_axiom :
  (forall reactor__currentpowerstatus   : int [(Reactor__reactoron.reactoron reactor__currentpowerstatus)].
   ( (let result = (Reactor__reactoron.reactoron reactor__currentpowerstatus) in (
    (Reactor__reactoron.reactoron__function_guard result reactor__currentpowerstatus)))
    -> ( ((Reactor__reactoron.reactoron reactor__currentpowerstatus) = True) <-> (reactor__currentpowerstatus = (0 : int)) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "startreactor" defined at reactor.ads:28, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Reactor__startreactor___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__currentpowerstatus as Reactor__currentpowerstatus
 use        Reactor__currentrods as Reactor__currentrods
 use        Reactor__currentwatersupply as Reactor__currentwatersupply
 use        Reactor__currenttemperature as Reactor__currenttemperature
 use        Reactor__currentmaxelectricity as Reactor__currentmaxelectricity
 use        Reactor__reactorcheck as Reactor__reactorcheck
 use        Reactor__electricity___axiom as Reactor__electricity___axiom
 use        Reactor__power___axiom as Reactor__power___axiom

 val startreactor 
   (__void_param : unit) : unit
  requires {  ( ( [@GP_Pretty_Ada:2945] (Reactor__currentpowerstatus.currentpowerstatus.int__content = (1 : int)) ) /\ ( [@GP_Pretty_Ada:2946] ((epsilon temp___result_214 : bool.
   ( (temp___result_214 = (Reactor__reactorcheck.reactorcheck Reactor__currenttemperature.currenttemperature.int__content Reactor__currentwatersupply.currentwatersupply.int__content)) /\ (Reactor__reactorcheck.reactorcheck__function_guard temp___result_214 Reactor__currenttemperature.currenttemperature.int__content Reactor__currentwatersupply.currentwatersupply.int__content) )) = True) ) ) }
  ensures {  ( (Reactor__power___axiom.dynamic_invariant Reactor__currentpowerstatus.currentpowerstatus.int__content True True True True) /\ (Reactor__electricity___axiom.dynamic_invariant Reactor__currentmaxelectricity.currentmaxelectricity.int__content True True True True) ) }
  reads {Reactor__currenttemperature.currenttemperature, Reactor__currentpowerstatus.currentpowerstatus, Reactor__currentrods.currentrods, Reactor__currentwatersupply.currentwatersupply, Reactor__currentmaxelectricity.currentmaxelectricity}
  writes {Reactor__currentpowerstatus.currentpowerstatus, Reactor__currentmaxelectricity.currentmaxelectricity}

end

(* Module for declaring a program function (and possibly an axiom) for "stopreactor" defined at reactor.ads:32, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Reactor__stopreactor___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__currentpowerstatus as Reactor__currentpowerstatus
 use        Reactor__currentmaxelectricity as Reactor__currentmaxelectricity
 use        Reactor__electricity___axiom as Reactor__electricity___axiom
 use        Reactor__power___axiom as Reactor__power___axiom

 val stopreactor 
   (__void_param : unit) : unit
  requires {  ( [@GP_Pretty_Ada:18583] (Reactor__currentpowerstatus.currentpowerstatus.int__content = (0 : int)) ) }
  ensures {  ( ( [@GP_Pretty_Ada:18593] (Reactor__currentpowerstatus.currentpowerstatus.int__content = (1 : int)) ) /\ ( (Reactor__power___axiom.dynamic_invariant Reactor__currentpowerstatus.currentpowerstatus.int__content True True True True) /\ (Reactor__electricity___axiom.dynamic_invariant Reactor__currentmaxelectricity.currentmaxelectricity.int__content True True True True) ) ) }
  reads {Reactor__currentpowerstatus.currentpowerstatus}
  writes {Reactor__currentpowerstatus.currentpowerstatus, Reactor__currentmaxelectricity.currentmaxelectricity}

end

(* Module for declaring a program function (and possibly an axiom) for "removecontrolrod" defined at reactor.ads:37, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Reactor__removecontrolrod___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__currentpowerstatus as Reactor__currentpowerstatus
 use        Reactor__currentrods as Reactor__currentrods
 use        Reactor__currentwatersupply as Reactor__currentwatersupply
 use        Reactor__currenttemperature as Reactor__currenttemperature
 use        Reactor__currenttemperatureincrease as Reactor__currenttemperatureincrease
 use        Reactor__currentreactorpower as Reactor__currentreactorpower
 use        Reactor__currentmaxelectricity as Reactor__currentmaxelectricity
 use        Reactor__reactorcheck as Reactor__reactorcheck
 use        Reactor__reactoron as Reactor__reactoron
 use        Reactor__controlrods___axiom as Reactor__controlrods___axiom
 use        Reactor__temperatureincrease___axiom as Reactor__temperatureincrease___axiom
 use        Reactor__reactorpower___axiom as Reactor__reactorpower___axiom
 use        Reactor__electricity___axiom as Reactor__electricity___axiom

 val removecontrolrod 
   (__void_param : unit) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:3013] (Reactor__currentrods.currentrods.int__content > (0 : int)) ) /\ ( [@GP_Pretty_Ada:3016] ((epsilon temp___result_215 : bool.
   ( (temp___result_215 = (Reactor__reactorcheck.reactorcheck Reactor__currenttemperature.currenttemperature.int__content Reactor__currentwatersupply.currentwatersupply.int__content)) /\ (Reactor__reactorcheck.reactorcheck__function_guard temp___result_215 Reactor__currenttemperature.currenttemperature.int__content Reactor__currentwatersupply.currentwatersupply.int__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:3018] ((epsilon temp___result_216 : bool.
   ( (temp___result_216 = (Reactor__reactoron.reactoron Reactor__currentpowerstatus.currentpowerstatus.int__content)) /\ (Reactor__reactoron.reactoron__function_guard temp___result_216 Reactor__currentpowerstatus.currentpowerstatus.int__content) )) = True) ) ) }
  ensures {  ( ( ( [@GP_Pretty_Ada:3025] (Reactor__currentrods.currentrods.int__content = ((old Reactor__currentrods.currentrods.int__content ) - (1 : int))) ) /\ ( [@GP_Pretty_Ada:3030] ((epsilon temp___result_217 : bool.
   ( (temp___result_217 = (Reactor__reactorcheck.reactorcheck Reactor__currenttemperature.currenttemperature.int__content Reactor__currentwatersupply.currentwatersupply.int__content)) /\ (Reactor__reactorcheck.reactorcheck__function_guard temp___result_217 Reactor__currenttemperature.currenttemperature.int__content Reactor__currentwatersupply.currentwatersupply.int__content) )) = True) ) ) /\ ( ( ( (Reactor__temperatureincrease___axiom.dynamic_invariant Reactor__currenttemperatureincrease.currenttemperatureincrease.int__content True True True True) /\ (Reactor__reactorpower___axiom.dynamic_invariant Reactor__currentreactorpower.currentreactorpower.int__content True True True True) ) /\ (Reactor__controlrods___axiom.dynamic_invariant Reactor__currentrods.currentrods.int__content True True True True) ) /\ (Reactor__electricity___axiom.dynamic_invariant Reactor__currentmaxelectricity.currentmaxelectricity.int__content True True True True) ) ) }
  reads {Reactor__currenttemperature.currenttemperature, Reactor__currenttemperatureincrease.currenttemperatureincrease, Reactor__currentpowerstatus.currentpowerstatus, Reactor__currentreactorpower.currentreactorpower, Reactor__currentrods.currentrods, Reactor__currentwatersupply.currentwatersupply}
  writes {Reactor__currenttemperatureincrease.currenttemperatureincrease, Reactor__currentreactorpower.currentreactorpower, Reactor__currentrods.currentrods, Reactor__currentmaxelectricity.currentmaxelectricity}

end

(* Module for declaring a program function (and possibly an axiom) for "addcontrolrod" defined at reactor.ads:42, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Reactor__addcontrolrod___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__currentpowerstatus as Reactor__currentpowerstatus
 use        Reactor__currentrods as Reactor__currentrods
 use        Reactor__currenttemperatureincrease as Reactor__currenttemperatureincrease
 use        Reactor__currentreactorpower as Reactor__currentreactorpower
 use        Reactor__currentmaxelectricity as Reactor__currentmaxelectricity
 use        Reactor__controlrods___axiom as Reactor__controlrods___axiom
 use        Reactor__temperatureincrease___axiom as Reactor__temperatureincrease___axiom
 use        Reactor__reactorpower___axiom as Reactor__reactorpower___axiom
 use        Reactor__electricity___axiom as Reactor__electricity___axiom

 val addcontrolrod 
   (__void_param : unit) : unit
  requires {  ( [@GP_Pretty_Ada:18705] (Reactor__currentrods.currentrods.int__content < (5 : int)) ) }
  ensures {  ( ( [@GP_Pretty_Ada:18718] (Reactor__currentrods.currentrods.int__content = ((old Reactor__currentrods.currentrods.int__content ) + (1 : int))) ) /\ ( ( ( (Reactor__temperatureincrease___axiom.dynamic_invariant Reactor__currenttemperatureincrease.currenttemperatureincrease.int__content True True True True) /\ (Reactor__reactorpower___axiom.dynamic_invariant Reactor__currentreactorpower.currentreactorpower.int__content True True True True) ) /\ (Reactor__controlrods___axiom.dynamic_invariant Reactor__currentrods.currentrods.int__content True True True True) ) /\ (Reactor__electricity___axiom.dynamic_invariant Reactor__currentmaxelectricity.currentmaxelectricity.int__content True True True True) ) ) }
  reads {Reactor__currenttemperatureincrease.currenttemperatureincrease, Reactor__currentpowerstatus.currentpowerstatus, Reactor__currentreactorpower.currentreactorpower, Reactor__currentrods.currentrods}
  writes {Reactor__currenttemperatureincrease.currenttemperatureincrease, Reactor__currentreactorpower.currentreactorpower, Reactor__currentrods.currentrods, Reactor__currentmaxelectricity.currentmaxelectricity}

end

(* Module for declaring a program function (and possibly an axiom) for "increasetemperature" defined at reactor.ads:47, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Reactor__increasetemperature___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Reactor__currentpowerstatus as Reactor__currentpowerstatus
 use        Reactor__currenttemperature as Reactor__currenttemperature
 use        Reactor__currenttemperatureincrease as Reactor__currenttemperatureincrease
 use        Reactor__temperature___axiom as Reactor__temperature___axiom

 val increasetemperature 
   (temp : int__ref) : unit
  requires {  ( [@GP_Pretty_Ada:18758] (Reactor__currenttemperature.currenttemperature.int__content < (100 : int)) ) }
  ensures {  ( ( [@GP_Pretty_Ada:18769] (Reactor__currenttemperature.currenttemperature.int__content >= (old Reactor__currenttemperature.currenttemperature.int__content )) ) /\ ( (Standard__integer___axiom.dynamic_invariant temp.int__content True True True True) /\ (Reactor__temperature___axiom.dynamic_invariant Reactor__currenttemperature.currenttemperature.int__content True True True True) ) ) }
  reads {Reactor__currenttemperature.currenttemperature, Reactor__currenttemperatureincrease.currenttemperatureincrease, Reactor__currentpowerstatus.currentpowerstatus}
  writes {Reactor__currenttemperature.currenttemperature, temp}

end

(* Module for declaring a program function (and possibly an axiom) for "decreasetemperature" defined at reactor.ads:52, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Reactor__decreasetemperature___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Reactor__currentwatersupply as Reactor__currentwatersupply
 use        Reactor__currenttemperature as Reactor__currenttemperature
 use        Reactor__temperature___axiom as Reactor__temperature___axiom

 val decreasetemperature 
   (temp : int__ref) : unit
  requires {  ( [@GP_Pretty_Ada:18807] (Reactor__currenttemperature.currenttemperature.int__content > (0 : int)) ) }
  ensures {  ( ( [@GP_Pretty_Ada:18818] (Reactor__currenttemperature.currenttemperature.int__content <= (old Reactor__currenttemperature.currenttemperature.int__content )) ) /\ ( (Standard__integer___axiom.dynamic_invariant temp.int__content True True True True) /\ (Reactor__temperature___axiom.dynamic_invariant Reactor__currenttemperature.currenttemperature.int__content True True True True) ) ) }
  reads {Reactor__currenttemperature.currenttemperature, Reactor__currentwatersupply.currentwatersupply}
  writes {Reactor__currenttemperature.currenttemperature, temp}

end

(* Module for declaring a program function (and possibly an axiom) for "increaseelectricity" defined at reactor.ads:57, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Reactor__increaseelectricity___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Reactor__currentreactorpower as Reactor__currentreactorpower
 use        Reactor__currentelectricityproduced as Reactor__currentelectricityproduced
 use        Reactor__currentmaxelectricity as Reactor__currentmaxelectricity
 use        Reactor__electricity___axiom as Reactor__electricity___axiom

 val increaseelectricity 
   (elec : int__ref) : unit
  requires {  ( [@GP_Pretty_Ada:18857] (Reactor__currentelectricityproduced.currentelectricityproduced.int__content <= Reactor__currentmaxelectricity.currentmaxelectricity.int__content) ) }
  ensures {  ( ( [@GP_Pretty_Ada:18874] ( (Reactor__currentelectricityproduced.currentelectricityproduced.int__content = ((old Reactor__currentelectricityproduced.currentelectricityproduced.int__content ) + Reactor__currentreactorpower.currentreactorpower.int__content)) \/ (Reactor__currentelectricityproduced.currentelectricityproduced.int__content = Reactor__currentmaxelectricity.currentmaxelectricity.int__content) ) ) /\ ( (Standard__integer___axiom.dynamic_invariant elec.int__content True True True True) /\ (Reactor__electricity___axiom.dynamic_invariant Reactor__currentelectricityproduced.currentelectricityproduced.int__content True True True True) ) ) }
  reads {Reactor__currentreactorpower.currentreactorpower, Reactor__currentelectricityproduced.currentelectricityproduced, Reactor__currentmaxelectricity.currentmaxelectricity}
  writes {Reactor__currentelectricityproduced.currentelectricityproduced, elec}

end

(* Module for declaring a program function (and possibly an axiom) for "decreasewatersupply" defined at reactor.ads:62, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Reactor__decreasewatersupply___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__currentpowerstatus as Reactor__currentpowerstatus
 use        Reactor__currentwatersupply as Reactor__currentwatersupply
 use        Reactor__reactoron as Reactor__reactoron
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom

 val decreasewatersupply 
   (__void_param : unit) : unit
  requires {  ( ( [@GP_Pretty_Ada:3235] (Reactor__currentwatersupply.currentwatersupply.int__content > (0 : int)) ) /\ ( [@GP_Pretty_Ada:3236] ((epsilon temp___result_218 : bool.
   ( (temp___result_218 = (Reactor__reactoron.reactoron Reactor__currentpowerstatus.currentpowerstatus.int__content)) /\ (Reactor__reactoron.reactoron__function_guard temp___result_218 Reactor__currentpowerstatus.currentpowerstatus.int__content) )) = True) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:18926] (Reactor__currentwatersupply.currentwatersupply.int__content = ((old Reactor__currentwatersupply.currentwatersupply.int__content ) - (1 : int))) ) /\ (Reactor__watersupply___axiom.dynamic_invariant Reactor__currentwatersupply.currentwatersupply.int__content True True True True) ) }
  reads {Reactor__currentpowerstatus.currentpowerstatus, Reactor__currentwatersupply.currentwatersupply}
  writes {Reactor__currentwatersupply.currentwatersupply}

end

(* Module for declaring a program function (and possibly an axiom) for "fillwatersupply" defined at reactor.ads:67, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Reactor__fillwatersupply___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__currentwatersupply as Reactor__currentwatersupply
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom

 val fillwatersupply 
   (__void_param : unit) : unit
  requires {  ( [@GP_Pretty_Ada:18961] (Reactor__currentwatersupply.currentwatersupply.int__content < (100 : int)) ) }
  ensures {  ( ( [@GP_Pretty_Ada:18972] (Reactor__currentwatersupply.currentwatersupply.int__content = (100 : int)) ) /\ (Reactor__watersupply___axiom.dynamic_invariant Reactor__currentwatersupply.currentwatersupply.int__content True True True True) ) }
  reads {Reactor__currentwatersupply.currentwatersupply}
  writes {Reactor__currentwatersupply.currentwatersupply}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "reactor" defined at reactor.ads:2, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Reactor__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Reactor__currentpowerstatus as Reactor__currentpowerstatus
 use        Reactor__currentrods as Reactor__currentrods
 use        Reactor__currentwatersupply as Reactor__currentwatersupply
 use        Reactor__currenttemperature as Reactor__currenttemperature
 use        Reactor__currenttemperatureincrease as Reactor__currenttemperatureincrease
 use        Reactor__currentreactorpower as Reactor__currentreactorpower
 use        Reactor__currentelectricityproduced as Reactor__currentelectricityproduced
 use        Reactor__currentmaxelectricity as Reactor__currentmaxelectricity
 use        Reactor__inputconst as Reactor__inputconst
 use        Reactor__controlrods___axiom as Reactor__controlrods___axiom
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__temperatureincrease___axiom as Reactor__temperatureincrease___axiom
 use        Reactor__reactorpower___axiom as Reactor__reactorpower___axiom
 use        Reactor__electricity___axiom as Reactor__electricity___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Reactor__controlrods___axiom as Reactor__controlrods___axiom
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__temperatureincrease___axiom as Reactor__temperatureincrease___axiom
 use        Reactor__reactorpower___axiom as Reactor__reactorpower___axiom
 use        Reactor__electricity___axiom as Reactor__electricity___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__currentpowerstatus___axiom as Reactor__currentpowerstatus___axiom
 use        Reactor__currentrods___axiom as Reactor__currentrods___axiom
 use        Reactor__currentwatersupply___axiom as Reactor__currentwatersupply___axiom
 use        Reactor__currenttemperature___axiom as Reactor__currenttemperature___axiom
 use        Reactor__currenttemperatureincrease___axiom as Reactor__currenttemperatureincrease___axiom
 use        Reactor__currentreactorpower___axiom as Reactor__currentreactorpower___axiom
 use        Reactor__currentelectricityproduced___axiom as Reactor__currentelectricityproduced___axiom
 use        Reactor__currentmaxelectricity___axiom as Reactor__currentmaxelectricity___axiom
 use        Reactor__inputconst___axiom as Reactor__inputconst___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom

 let def [#"reactor.ads" 2 0 0][@GP_Subp:reactor.ads:2] 
   (__void_param : unit)
  requires { [#"reactor.ads" 2 0 0] true }
   = [@vc:divergent]
  ( [#"reactor.ads" 2 0 0] assume { [#"reactor.ads" 2 0 0] ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"reactor.ads" 2 0 0] ());
  ([#"reactor.ads" 4 0 0] ());
  ([#"reactor.ads" 5 0 0] ());
  ([#"reactor.ads" 6 0 0] ());
  ([#"reactor.ads" 7 0 0] ());
  ([#"reactor.ads" 8 0 0] ());
  ([#"reactor.ads" 9 0 0] ());
  ([#"reactor.ads" 10 0 0] ());
  ([#"reactor.ads" 12 0 0] ());
  ([#"reactor.ads" 12 0 0] ( [#"reactor.ads" 12 0 0] (Reactor__currentpowerstatus.currentpowerstatus.int__content <- ( (1 : int) ));
  [#"reactor.ads" 12 0 0] assume { [#"reactor.ads" 12 0 0] (Reactor__power___axiom.dynamic_invariant Reactor__currentpowerstatus.currentpowerstatus.int__content True False True True) } ));
  ([#"reactor.ads" 13 0 0] ( [#"reactor.ads" 13 0 0] (Reactor__currentrods.currentrods.int__content <- ( (5 : int) ));
  [#"reactor.ads" 13 0 0] assume { [#"reactor.ads" 13 0 0] (Reactor__controlrods___axiom.dynamic_invariant Reactor__currentrods.currentrods.int__content True False True True) } ));
  ([#"reactor.ads" 14 0 0] ( [#"reactor.ads" 14 0 0] (Reactor__currentwatersupply.currentwatersupply.int__content <- ( (100 : int) ));
  [#"reactor.ads" 14 0 0] assume { [#"reactor.ads" 14 0 0] (Reactor__watersupply___axiom.dynamic_invariant Reactor__currentwatersupply.currentwatersupply.int__content True False True True) } ));
  ([#"reactor.ads" 15 0 0] ( [#"reactor.ads" 15 0 0] (Reactor__currenttemperature.currenttemperature.int__content <- ( (0 : int) ));
  [#"reactor.ads" 15 0 0] assume { [#"reactor.ads" 15 0 0] (Reactor__temperature___axiom.dynamic_invariant Reactor__currenttemperature.currenttemperature.int__content True False True True) } ));
  ([#"reactor.ads" 16 0 0] ( [#"reactor.ads" 16 0 0] (Reactor__currenttemperatureincrease.currenttemperatureincrease.int__content <- ( (1 : int) ));
  [#"reactor.ads" 16 0 0] assume { [#"reactor.ads" 16 0 0] (Reactor__temperatureincrease___axiom.dynamic_invariant Reactor__currenttemperatureincrease.currenttemperatureincrease.int__content True False True True) } ));
  ([#"reactor.ads" 17 0 0] ( [#"reactor.ads" 17 0 0] (Reactor__currentreactorpower.currentreactorpower.int__content <- ( (1 : int) ));
  [#"reactor.ads" 17 0 0] assume { [#"reactor.ads" 17 0 0] (Reactor__reactorpower___axiom.dynamic_invariant Reactor__currentreactorpower.currentreactorpower.int__content True False True True) } ));
  ([#"reactor.ads" 18 0 0] ( [#"reactor.ads" 18 0 0] (Reactor__currentelectricityproduced.currentelectricityproduced.int__content <- ( (0 : int) ));
  [#"reactor.ads" 18 0 0] assume { [#"reactor.ads" 18 0 0] (Reactor__electricity___axiom.dynamic_invariant Reactor__currentelectricityproduced.currentelectricityproduced.int__content True False True True) } ));
  ([#"reactor.ads" 19 0 0] ( [#"reactor.ads" 19 0 0] (Reactor__currentmaxelectricity.currentmaxelectricity.int__content <- ( (0 : int) ));
  [#"reactor.ads" 19 0 0] assume { [#"reactor.ads" 19 0 0] (Reactor__electricity___axiom.dynamic_invariant Reactor__currentmaxelectricity.currentmaxelectricity.int__content True False True True) } ));
  ([#"reactor.ads" 20 0 0] ( [#"reactor.ads" 20 0 0] (Reactor__inputconst.inputconst.int__content <- ( (0 : int) ));
  [#"reactor.ads" 20 0 0] assume { [#"reactor.ads" 20 0 0] (Standard__integer___axiom.dynamic_invariant Reactor__inputconst.inputconst.int__content True False True True) } ));
  ([#"reactor.ads" 22 0 0] ());
  ([#"reactor.ads" 25 0 0] ());
  ([#"reactor.ads" 28 0 0] ());
  ([#"reactor.ads" 30 0 0] ());
  ([#"reactor.ads" 29 0 0] ());
  ([#"reactor.ads" 32 0 0] ());
  ([#"reactor.ads" 35 0 0] ());
  ([#"reactor.ads" 34 0 0] ());
  ([#"reactor.ads" 33 0 0] ());
  ([#"reactor.ads" 37 0 0] ());
  ([#"reactor.ads" 40 0 0] ());
  ([#"reactor.ads" 39 0 0] ());
  ([#"reactor.ads" 38 0 0] ());
  ([#"reactor.ads" 42 0 0] ());
  ([#"reactor.ads" 45 0 0] ());
  ([#"reactor.ads" 44 0 0] ());
  ([#"reactor.ads" 43 0 0] ());
  ([#"reactor.ads" 47 0 0] ());
  ([#"reactor.ads" 50 0 0] ());
  ([#"reactor.ads" 49 0 0] ());
  ([#"reactor.ads" 48 0 0] ());
  ([#"reactor.ads" 52 0 0] ());
  ([#"reactor.ads" 55 0 0] ());
  ([#"reactor.ads" 54 0 0] ());
  ([#"reactor.ads" 53 0 0] ());
  ([#"reactor.ads" 57 0 0] ());
  ([#"reactor.ads" 60 0 0] ());
  ([#"reactor.ads" 59 0 0] ());
  ([#"reactor.ads" 58 0 0] ());
  ([#"reactor.ads" 62 0 0] ());
  ([#"reactor.ads" 65 0 0] ());
  ([#"reactor.ads" 64 0 0] ());
  ([#"reactor.ads" 63 0 0] ());
  ([#"reactor.ads" 67 0 0] ());
  ([#"reactor.ads" 70 0 0] ());
  ([#"reactor.ads" 69 0 0] ());
  ([#"reactor.ads" 68 0 0] ());
  ([#"reactor.ads" 22 0 0] ());
  ([#"reactor.ads" 25 0 0] ());
   assume {  ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"reactor.adb" 2 0 0] ());
  ([#"reactor.adb" 4 0 0] ());
  ([#"reactor.adb" 12 0 0] ());
  ([#"reactor.adb" 18 0 0] ());
  ([#"reactor.adb" 41 0 0] ());
  ([#"reactor.adb" 60 0 0] ());
  ([#"reactor.adb" 72 0 0] ());
  ([#"reactor.adb" 87 0 0] ());
  ([#"reactor.adb" 97 0 0] ());
  ([#"reactor.adb" 104 0 0] ());
  ();
  ( [@GP_Sloc:reactor.adb:110:1] ([#"reactor.adb" 110 0 0] ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "reactorcheck" defined at reactor.ads:22, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Reactor__reactorcheck__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Reactor__currentwatersupply as Reactor__currentwatersupply
 use        Reactor__currenttemperature as Reactor__currenttemperature
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__currentwatersupply___axiom as Reactor__currentwatersupply___axiom
 use        Reactor__currenttemperature___axiom as Reactor__currenttemperature___axiom

 val reactor__reactorcheck__result [@model_projected] [@model_trace:2880@result] [@name:ReactorCheck]  : bool__ref 
 
 let def [#"reactor.ads" 22 0 0][@GP_Subp:reactor.ads:22] 
   (__void_param : unit)
  requires { [#"reactor.ads" 22 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram reactor.ads:22 *)
  ;
  [#"reactor.ads" 22 0 0] assume { [#"reactor.ads" 22 0 0] (Reactor__watersupply___axiom.dynamic_invariant Reactor__currentwatersupply.currentwatersupply.int__content True False True True) };
  [#"reactor.ads" 22 0 0] assume { [#"reactor.ads" 22 0 0] (Reactor__temperature___axiom.dynamic_invariant Reactor__currenttemperature.currenttemperature.int__content True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram reactor.ads:22 *)
  ;
  () (* Check for RTE in the Pre of the subprogram reactor.ads:22 *)
  ;
  [#"reactor.ads" 22 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram reactor.ads:22 *)
  ;
  [#"reactor.ads" 22 0 0] try
   ( ();
   ( [@GP_Sloc:reactor.ads:23:45] ([#"reactor.ads" 23 0 0] ( [#"reactor.ads" 23 0 0] (reactor__reactorcheck__result.bool__content <- ( (Boolean.andb((Reactor__currenttemperature.currenttemperature.int__content < (100 : int))) ((Reactor__currentwatersupply.currentwatersupply.int__content > (0 : int)))) ));
   [#"reactor.ads" 23 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  reactor__reactorcheck__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "reactoron" defined at reactor.ads:25, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Reactor__reactoron__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__currentpowerstatus as Reactor__currentpowerstatus
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__currentpowerstatus___axiom as Reactor__currentpowerstatus___axiom

 val reactor__reactoron__result [@name:ReactorOn] [@model_trace:2901@result] [@model_projected]  : bool__ref 
 
 let def [#"reactor.ads" 25 0 0][@GP_Subp:reactor.ads:25] 
   (__void_param : unit)
  requires { [#"reactor.ads" 25 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram reactor.ads:25 *)
  ;
  [#"reactor.ads" 25 0 0] assume { [#"reactor.ads" 25 0 0] (Reactor__power___axiom.dynamic_invariant Reactor__currentpowerstatus.currentpowerstatus.int__content True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram reactor.ads:25 *)
  ;
  () (* Check for RTE in the Pre of the subprogram reactor.ads:25 *)
  ;
  [#"reactor.ads" 25 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram reactor.ads:25 *)
  ;
  [#"reactor.ads" 25 0 0] try
   ( ();
   ( [@GP_Sloc:reactor.ads:26:27] ([#"reactor.ads" 26 0 0] ( [#"reactor.ads" 26 0 0] (reactor__reactoron__result.bool__content <- ( (Reactor__currentpowerstatus.currentpowerstatus.int__content = (0 : int)) ));
   [#"reactor.ads" 26 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  reactor__reactoron__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "startreactor" defined at reactor.ads:28, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Reactor__startreactor__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Int_Division as Int_Division
 use        "_gnatprove_standard".Boolean as Boolean
 use        Reactor__currentpowerstatus as Reactor__currentpowerstatus
 use        Reactor__currentrods as Reactor__currentrods
 use        Reactor__currentwatersupply as Reactor__currentwatersupply
 use        Reactor__currenttemperature as Reactor__currenttemperature
 use        Reactor__currentmaxelectricity as Reactor__currentmaxelectricity
 use        Reactor__reactorcheck as Reactor__reactorcheck
 use        Reactor__reactorcheck___axiom as Reactor__reactorcheck___axiom
 use        Reactor__controlrods___axiom as Reactor__controlrods___axiom
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__electricity as Reactor__electricity
 use        Reactor__electricity___axiom as Reactor__electricity___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__controlrods___axiom as Reactor__controlrods___axiom
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__electricity___axiom as Reactor__electricity___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__currentpowerstatus___axiom as Reactor__currentpowerstatus___axiom
 use        Reactor__currentrods___axiom as Reactor__currentrods___axiom
 use        Reactor__currentwatersupply___axiom as Reactor__currentwatersupply___axiom
 use        Reactor__currenttemperature___axiom as Reactor__currenttemperature___axiom
 use        Reactor__currentmaxelectricity___axiom as Reactor__currentmaxelectricity___axiom
 use        Reactor__reactorcheck___axiom as Reactor__reactorcheck___axiom

 let def [#"reactor.ads" 28 0 0][@GP_Subp:reactor.ads:28] 
   (__void_param : unit)
  requires { [#"reactor.ads" 28 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram reactor.ads:28 *)
  ;
  [#"reactor.ads" 28 0 0] assume { [#"reactor.ads" 28 0 0] (Reactor__power___axiom.dynamic_invariant Reactor__currentpowerstatus.currentpowerstatus.int__content True False True True) };
  [#"reactor.ads" 28 0 0] assume { [#"reactor.ads" 28 0 0] (Reactor__controlrods___axiom.dynamic_invariant Reactor__currentrods.currentrods.int__content True False True True) };
  [#"reactor.ads" 28 0 0] assume { [#"reactor.ads" 28 0 0] (Reactor__watersupply___axiom.dynamic_invariant Reactor__currentwatersupply.currentwatersupply.int__content True False True True) };
  [#"reactor.ads" 28 0 0] assume { [#"reactor.ads" 28 0 0] (Reactor__temperature___axiom.dynamic_invariant Reactor__currenttemperature.currenttemperature.int__content True False True True) };
  [#"reactor.ads" 28 0 0] assume { [#"reactor.ads" 28 0 0] (Reactor__electricity___axiom.dynamic_invariant Reactor__currentmaxelectricity.currentmaxelectricity.int__content True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram reactor.ads:28 *)
  ;
  () (* Check for RTE in the Pre of the subprogram reactor.ads:28 *)
  ;
  [#"reactor.ads" 28 0 0] begin ensures {true} let _ = (let _ = (Boolean.andb((Reactor__currentpowerstatus.currentpowerstatus.int__content = (1 : int))) ((Reactor__reactorcheck___axiom.reactorcheck(())))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram reactor.ads:28 *)
  ;
  [#"reactor.ads" 28 0 0] assume { [#"reactor.ads" 28 0 0] ( ( [@GP_Pretty_Ada:2945] (Reactor__currentpowerstatus.currentpowerstatus.int__content = (1 : int)) ) /\ ( [@GP_Pretty_Ada:2946] ((epsilon temp___result_219 : bool.
   ( (temp___result_219 = (Reactor__reactorcheck.reactorcheck Reactor__currenttemperature.currenttemperature.int__content Reactor__currentwatersupply.currentwatersupply.int__content)) /\ (Reactor__reactorcheck.reactorcheck__function_guard temp___result_219 Reactor__currenttemperature.currenttemperature.int__content Reactor__currentwatersupply.currentwatersupply.int__content) )) = True) ) ) };
  [#"reactor.ads" 28 0 0] try
   ( ();
   ( [@GP_Sloc:reactor.adb:6:10] ([#"reactor.adb" 6 0 0] ()) );
   ( [@GP_Sloc:reactor.adb:6:7] ([#"reactor.adb" 6 0 0] (if (( ([#"reactor.adb" 6 0 0] [#"reactor.adb" 6 0 0] (([@branch_id=2324] Main.spark__branch).bool__content <- ( (Reactor__currentrods.currentrods.int__content = (5 : int)) )));
   ( [@branch_id=2324] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:reactor.adb:7:10] ([#"reactor.adb" 7 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:7:29] ([#"reactor.adb" 7 0 0] [#"reactor.adb" 7 0 0] (Reactor__currentpowerstatus.currentpowerstatus.int__content <- ( (0 : int) ))) );
    ( [@GP_Sloc:reactor.adb:8:10] ([#"reactor.adb" 8 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:8:54] ([#"reactor.adb" 8 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:8:32] ([#"reactor.adb" 8 0 0] [#"reactor.adb" 8 0 0] (Reactor__currentmaxelectricity.currentmaxelectricity.int__content <- ( ([#"reactor.adb" 8 0 0] ( [@GP_Shape:if__currentmaxelectricity_assign__div] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:         currentMaxElectricity := Electricity'Last / currentRods;                                                    ^ reactor.adb:8:52:VC_RANGE_CHECK] [@GP_Sloc:reactor.adb:8:52] [@GP_Id:1] (Reactor__electricity.range_check_(([#"reactor.adb" 8 0 0] ( [@comment:         currentMaxElectricity := Electricity'Last / currentRods;                                                    ^ reactor.adb:8:52:VC_DIVISION_CHECK] [@GP_Shape:if__currentmaxelectricity_assign__div] [@vc:annotation] [@GP_Reason:VC_DIVISION_CHECK] [@GP_Sloc:reactor.adb:8:52] [@GP_Id:0] (Int_Division.div_((200 : int)) (Reactor__currentrods.currentrods.int__content)) )))) )) ))) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "stopreactor" defined at reactor.ads:32, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Reactor__stopreactor__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__currentpowerstatus as Reactor__currentpowerstatus
 use        Reactor__currentmaxelectricity as Reactor__currentmaxelectricity
 use        Reactor__electricity___axiom as Reactor__electricity___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__electricity___axiom as Reactor__electricity___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__currentpowerstatus___axiom as Reactor__currentpowerstatus___axiom
 use        Reactor__currentmaxelectricity___axiom as Reactor__currentmaxelectricity___axiom

 let def [#"reactor.ads" 32 0 0][@GP_Subp:reactor.ads:32] 
   (__void_param : unit)
  requires { [#"reactor.ads" 32 0 0] true }
  ensures { [#"reactor.ads" 32 0 0] ([#"reactor.ads" 35 0 0] ( [@comment:     Post => currentPowerStatus = Off;              ^ reactor.ads:35:14:VC_POSTCONDITION] [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:reactor.ads:35:14] [@model_vc_post] [@GP_Id:2] ( [@GP_Sloc:reactor.ads:35:14] [@GP_Pretty_Ada:18593] (Reactor__currentpowerstatus.currentpowerstatus.int__content = (1 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram reactor.ads:32 *)
  ;
   assume {  (Reactor__power___axiom.dynamic_invariant Reactor__currentpowerstatus.currentpowerstatus.int__content True False True True) };
   assume {  (Reactor__electricity___axiom.dynamic_invariant Reactor__currentmaxelectricity.currentmaxelectricity.int__content False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram reactor.ads:32 *)
  ;
  () (* Check for RTE in the Pre of the subprogram reactor.ads:32 *)
  ;
   begin ensures {true} let _ = (let _ = (Reactor__currentpowerstatus.currentpowerstatus.int__content = (0 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram reactor.ads:32 *)
  ;
   assume {  ( [@GP_Pretty_Ada:18583] (Reactor__currentpowerstatus.currentpowerstatus.int__content = (0 : int)) ) };
   try
   ( ();
   ( [@GP_Sloc:reactor.adb:14:7] ([#"reactor.adb" 14 0 0] ()) );
   ( [@GP_Sloc:reactor.adb:14:26] ([#"reactor.adb" 14 0 0] [#"reactor.adb" 14 0 0] (Reactor__currentpowerstatus.currentpowerstatus.int__content <- ( (1 : int) ))) );
   ( [@GP_Sloc:reactor.adb:15:7] ([#"reactor.adb" 15 0 0] ()) );
   ( [@GP_Sloc:reactor.adb:15:29] ([#"reactor.adb" 15 0 0] [#"reactor.adb" 15 0 0] (Reactor__currentmaxelectricity.currentmaxelectricity.int__content <- ( (0 : int) ))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Reactor__currentpowerstatus.currentpowerstatus.int__content = (1 : int)) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "removecontrolrod" defined at reactor.ads:37, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Reactor__removecontrolrod__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Int_Division as Int_Division
 use        "_gnatprove_standard".Boolean as Boolean
 use        Reactor__currentpowerstatus as Reactor__currentpowerstatus
 use        Reactor__currentrods as Reactor__currentrods
 use        Reactor__currentwatersupply as Reactor__currentwatersupply
 use        Reactor__currenttemperature as Reactor__currenttemperature
 use        Reactor__currenttemperatureincrease as Reactor__currenttemperatureincrease
 use        Reactor__currentreactorpower as Reactor__currentreactorpower
 use        Reactor__currentmaxelectricity as Reactor__currentmaxelectricity
 use        Reactor__reactorcheck as Reactor__reactorcheck
 use        Reactor__reactorcheck___axiom as Reactor__reactorcheck___axiom
 use        Reactor__reactoron as Reactor__reactoron
 use        Reactor__reactoron___axiom as Reactor__reactoron___axiom
 use        Reactor__controlrods as Reactor__controlrods
 use        Reactor__controlrods___axiom as Reactor__controlrods___axiom
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__temperatureincrease as Reactor__temperatureincrease
 use        Reactor__temperatureincrease___axiom as Reactor__temperatureincrease___axiom
 use        Reactor__reactorpower as Reactor__reactorpower
 use        Reactor__reactorpower___axiom as Reactor__reactorpower___axiom
 use        Reactor__electricity as Reactor__electricity
 use        Reactor__electricity___axiom as Reactor__electricity___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__controlrods___axiom as Reactor__controlrods___axiom
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__temperatureincrease___axiom as Reactor__temperatureincrease___axiom
 use        Reactor__reactorpower___axiom as Reactor__reactorpower___axiom
 use        Reactor__electricity___axiom as Reactor__electricity___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__currentpowerstatus___axiom as Reactor__currentpowerstatus___axiom
 use        Reactor__currentrods___axiom as Reactor__currentrods___axiom
 use        Reactor__currentwatersupply___axiom as Reactor__currentwatersupply___axiom
 use        Reactor__currenttemperature___axiom as Reactor__currenttemperature___axiom
 use        Reactor__currenttemperatureincrease___axiom as Reactor__currenttemperatureincrease___axiom
 use        Reactor__currentreactorpower___axiom as Reactor__currentreactorpower___axiom
 use        Reactor__currentmaxelectricity___axiom as Reactor__currentmaxelectricity___axiom
 use        Reactor__reactorcheck___axiom as Reactor__reactorcheck___axiom
 use        Reactor__reactoron___axiom as Reactor__reactoron___axiom

 let def [#"reactor.ads" 37 0 0][@GP_Subp:reactor.ads:37] 
   (__void_param : unit)
  requires { [#"reactor.ads" 37 0 0] true }
  ensures { [#"reactor.ads" 37 0 0] ([#"reactor.ads" 40 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:reactor.ads:40:14] [@model_vc_post] [@GP_Shape:pragargs__and] [@GP_Id:8] [@comment:     Post => currentRods = currentRods'Old-1 and ReactorCheck;              ^ reactor.ads:40:14:VC_POSTCONDITION] ( ( [@GP_Pretty_Ada:3025] [@GP_Sloc:reactor.ads:40:14] (Reactor__currentrods.currentrods.int__content = ((old Reactor__currentrods.currentrods.int__content ) - (1 : int))) ) /\ ( [@GP_Sloc:reactor.ads:40:50] [@GP_Pretty_Ada:3030] ((epsilon temp___result_223 : bool.
   ( (temp___result_223 = (Reactor__reactorcheck.reactorcheck Reactor__currenttemperature.currenttemperature.int__content Reactor__currentwatersupply.currentwatersupply.int__content)) /\ (Reactor__reactorcheck.reactorcheck__function_guard temp___result_223 Reactor__currenttemperature.currenttemperature.int__content Reactor__currentwatersupply.currentwatersupply.int__content) )) = True) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram reactor.ads:37 *)
  ;
   assume {  (Reactor__power___axiom.dynamic_invariant Reactor__currentpowerstatus.currentpowerstatus.int__content True False True True) };
   assume {  (Reactor__controlrods___axiom.dynamic_invariant Reactor__currentrods.currentrods.int__content True False True True) };
   assume {  (Reactor__watersupply___axiom.dynamic_invariant Reactor__currentwatersupply.currentwatersupply.int__content True False True True) };
   assume {  (Reactor__temperature___axiom.dynamic_invariant Reactor__currenttemperature.currenttemperature.int__content True False True True) };
   assume {  (Reactor__temperatureincrease___axiom.dynamic_invariant Reactor__currenttemperatureincrease.currenttemperatureincrease.int__content True False True True) };
   assume {  (Reactor__reactorpower___axiom.dynamic_invariant Reactor__currentreactorpower.currentreactorpower.int__content True False True True) };
   assume {  (Reactor__electricity___axiom.dynamic_invariant Reactor__currentmaxelectricity.currentmaxelectricity.int__content False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram reactor.ads:37 *)
  ;
  () (* Check for RTE in the Pre of the subprogram reactor.ads:37 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((Reactor__currentrods.currentrods.int__content > (0 : int))) ((Reactor__reactorcheck___axiom.reactorcheck(()))))) ((Reactor__reactoron___axiom.reactoron(())))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram reactor.ads:37 *)
  ;
   assume {  ( ( ( [@GP_Pretty_Ada:3013] (Reactor__currentrods.currentrods.int__content > (0 : int)) ) /\ ( [@GP_Pretty_Ada:3016] ((epsilon temp___result_221 : bool.
   ( (temp___result_221 = (Reactor__reactorcheck.reactorcheck Reactor__currenttemperature.currenttemperature.int__content Reactor__currentwatersupply.currentwatersupply.int__content)) /\ (Reactor__reactorcheck.reactorcheck__function_guard temp___result_221 Reactor__currenttemperature.currenttemperature.int__content Reactor__currentwatersupply.currentwatersupply.int__content) )) = True) ) ) /\ ( [@GP_Pretty_Ada:3018] ((epsilon temp___result_222 : bool.
   ( (temp___result_222 = (Reactor__reactoron.reactoron Reactor__currentpowerstatus.currentpowerstatus.int__content)) /\ (Reactor__reactoron.reactoron__function_guard temp___result_222 Reactor__currentpowerstatus.currentpowerstatus.int__content) )) = True) ) ) };
   begin ensures {true} let _ = (let _ = Reactor__currentrods.currentrods.int__content in (
   ()))
   in () end ;
  (let temp___old_220 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = Reactor__currentrods.currentrods.int__content)} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:reactor.adb:20:7] ([#"reactor.adb" 20 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:20:22] ([#"reactor.adb" 20 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:20:19] ([#"reactor.adb" 20 0 0] [#"reactor.adb" 20 0 0] (Reactor__currentrods.currentrods.int__content <- ( ([#"reactor.adb" 20 0 0] ( [@GP_Shape:currentrods_assign__sub] [@GP_Sloc:reactor.adb:20:33] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:      currentRods := currentRods-1;                                 ^ reactor.adb:20:33:VC_RANGE_CHECK] [@GP_Id:3] (Reactor__controlrods.range_check_((Reactor__currentrods.currentrods.int__content - (1 : int)))) )) ))) );
    ( [@GP_Sloc:reactor.adb:21:10] ([#"reactor.adb" 21 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:21:7] ([#"reactor.adb" 21 0 0] (if (( ([#"reactor.adb" 21 0 0] [#"reactor.adb" 21 0 0] (([@branch_id=2373] Main.spark__branch).bool__content <- ( (Reactor__currentpowerstatus.currentpowerstatus.int__content = (0 : int)) )));
    ( [@branch_id=2373] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:reactor.adb:22:13] ([#"reactor.adb" 22 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:22:10] ([#"reactor.adb" 22 0 0] (if (( ([#"reactor.adb" 22 0 0] [#"reactor.adb" 22 0 0] (([@branch_id=2377] Main.spark__branch).bool__content <- ( (Reactor__currenttemperatureincrease.currenttemperatureincrease.int__content < (5 : int)) )));
     ( [@branch_id=2377] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:reactor.adb:23:13] ([#"reactor.adb" 23 0 0] ()) );
      ( [@GP_Sloc:reactor.adb:23:43] ([#"reactor.adb" 23 0 0] ()) );
      ( [@GP_Sloc:reactor.adb:23:40] ([#"reactor.adb" 23 0 0] [#"reactor.adb" 23 0 0] (Reactor__currenttemperatureincrease.currenttemperatureincrease.int__content <- ( ([#"reactor.adb" 23 0 0] ( [@vc:annotation] [@GP_Sloc:reactor.adb:23:69] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__if__currenttemperatureincrease_assign__add] [@comment:            currentTemperatureIncrease := currentTemperatureIncrease+1;                                                                     ^ reactor.adb:23:69:VC_RANGE_CHECK] [@GP_Id:4] (Reactor__temperatureincrease.range_check_((Reactor__currenttemperatureincrease.currenttemperatureincrease.int__content + (1 : int)))) )) ))) ) )) else (
      ()))) );
     ( [@GP_Sloc:reactor.adb:26:13] ([#"reactor.adb" 26 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:26:10] ([#"reactor.adb" 26 0 0] (if (( ([#"reactor.adb" 26 0 0] [#"reactor.adb" 26 0 0] (([@branch_id=2388] Main.spark__branch).bool__content <- ( (Reactor__currentreactorpower.currentreactorpower.int__content < (8 : int)) )));
     ( [@branch_id=2388] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:reactor.adb:27:13] ([#"reactor.adb" 27 0 0] ()) );
      ( [@GP_Sloc:reactor.adb:27:36] ([#"reactor.adb" 27 0 0] ()) );
      ( [@GP_Sloc:reactor.adb:27:33] ([#"reactor.adb" 27 0 0] [#"reactor.adb" 27 0 0] (Reactor__currentreactorpower.currentreactorpower.int__content <- ( ([#"reactor.adb" 27 0 0] ( [@GP_Shape:if__if__currentreactorpower_assign__add] [@vc:annotation] [@GP_Sloc:reactor.adb:27:55] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:5] [@comment:            currentReactorPower := currentReactorPower+2;                                                       ^ reactor.adb:27:55:VC_RANGE_CHECK] (Reactor__reactorpower.range_check_((Reactor__currentreactorpower.currentreactorpower.int__content + (2 : int)))) )) ))) ) )) else (
      ( ();
      ( [@GP_Sloc:reactor.adb:29:13] ([#"reactor.adb" 29 0 0] ()) );
      ( [@GP_Sloc:reactor.adb:29:33] ([#"reactor.adb" 29 0 0] [#"reactor.adb" 29 0 0] (Reactor__currentreactorpower.currentreactorpower.int__content <- ( (10 : int) ))) ) )))) );
     ( [@GP_Sloc:reactor.adb:31:13] ([#"reactor.adb" 31 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:31:10] ([#"reactor.adb" 31 0 0] (if (( ([#"reactor.adb" 31 0 0] [#"reactor.adb" 31 0 0] (([@branch_id=2406] Main.spark__branch).bool__content <- ( (Reactor__currentrods.currentrods.int__content > (0 : int)) )));
     ( [@branch_id=2406] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:reactor.adb:32:13] ([#"reactor.adb" 32 0 0] ()) );
      ( [@GP_Sloc:reactor.adb:32:57] ([#"reactor.adb" 32 0 0] ()) );
      ( [@GP_Sloc:reactor.adb:32:35] ([#"reactor.adb" 32 0 0] [#"reactor.adb" 32 0 0] (Reactor__currentmaxelectricity.currentmaxelectricity.int__content <- ( ([#"reactor.adb" 32 0 0] ( [@vc:annotation] [@GP_Sloc:reactor.adb:32:55] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__if__currentmaxelectricity_assign__div] [@comment:            currentMaxElectricity := Electricity'Last / currentRods;                                                       ^ reactor.adb:32:55:VC_RANGE_CHECK] [@GP_Id:7] (Reactor__electricity.range_check_(([#"reactor.adb" 32 0 0] ( [@vc:annotation] [@GP_Reason:VC_DIVISION_CHECK] [@GP_Sloc:reactor.adb:32:55] [@comment:            currentMaxElectricity := Electricity'Last / currentRods;                                                       ^ reactor.adb:32:55:VC_DIVISION_CHECK] [@GP_Shape:if__if__currentmaxelectricity_assign__div] [@GP_Id:6] (Int_Division.div_((200 : int)) (Reactor__currentrods.currentrods.int__content)) )))) )) ))) ) )) else (
      ( ();
      ( [@GP_Sloc:reactor.adb:34:13] ([#"reactor.adb" 34 0 0] ()) );
      ( [@GP_Sloc:reactor.adb:34:35] ([#"reactor.adb" 34 0 0] [#"reactor.adb" 34 0 0] (Reactor__currentmaxelectricity.currentmaxelectricity.int__content <- ( (200 : int) ))) ) )))) ) )) else (
     ( ();
     ( [@GP_Sloc:reactor.adb:37:10] ([#"reactor.adb" 37 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:37:32] ([#"reactor.adb" 37 0 0] [#"reactor.adb" 37 0 0] (Reactor__currentmaxelectricity.currentmaxelectricity.int__content <- ( (0 : int) ))) ) )))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = (Boolean.andb((Reactor__currentrods.currentrods.int__content = (temp___old_220 - (1 : int)))) ((Reactor__reactorcheck___axiom.reactorcheck(())))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "addcontrolrod" defined at reactor.ads:42, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Reactor__addcontrolrod__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Int_Division as Int_Division
 use        Reactor__currentpowerstatus as Reactor__currentpowerstatus
 use        Reactor__currentrods as Reactor__currentrods
 use        Reactor__currenttemperatureincrease as Reactor__currenttemperatureincrease
 use        Reactor__currentreactorpower as Reactor__currentreactorpower
 use        Reactor__currentmaxelectricity as Reactor__currentmaxelectricity
 use        Reactor__reactoron___axiom as Reactor__reactoron___axiom
 use        Reactor__controlrods as Reactor__controlrods
 use        Reactor__controlrods___axiom as Reactor__controlrods___axiom
 use        Reactor__temperatureincrease as Reactor__temperatureincrease
 use        Reactor__temperatureincrease___axiom as Reactor__temperatureincrease___axiom
 use        Reactor__reactorpower as Reactor__reactorpower
 use        Reactor__reactorpower___axiom as Reactor__reactorpower___axiom
 use        Reactor__electricity as Reactor__electricity
 use        Reactor__electricity___axiom as Reactor__electricity___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__controlrods___axiom as Reactor__controlrods___axiom
 use        Reactor__temperatureincrease___axiom as Reactor__temperatureincrease___axiom
 use        Reactor__reactorpower___axiom as Reactor__reactorpower___axiom
 use        Reactor__electricity___axiom as Reactor__electricity___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__currentpowerstatus___axiom as Reactor__currentpowerstatus___axiom
 use        Reactor__currentrods___axiom as Reactor__currentrods___axiom
 use        Reactor__currenttemperatureincrease___axiom as Reactor__currenttemperatureincrease___axiom
 use        Reactor__currentreactorpower___axiom as Reactor__currentreactorpower___axiom
 use        Reactor__currentmaxelectricity___axiom as Reactor__currentmaxelectricity___axiom
 use        Reactor__reactoron___axiom as Reactor__reactoron___axiom

 let def [#"reactor.ads" 42 0 0][@GP_Subp:reactor.ads:42] 
   (__void_param : unit)
  requires { [#"reactor.ads" 42 0 0] true }
  ensures { [#"reactor.ads" 42 0 0] ([#"reactor.ads" 45 0 0] ( [@comment:     Post => currentRods = currentRods'Old+1;              ^ reactor.ads:45:14:VC_POSTCONDITION] [@GP_Reason:VC_POSTCONDITION] [@GP_Id:14] [@GP_Shape:pragargs__cmp] [@GP_Sloc:reactor.ads:45:14] [@model_vc_post] ( [@GP_Pretty_Ada:18718] [@GP_Sloc:reactor.ads:45:14] (Reactor__currentrods.currentrods.int__content = ((old Reactor__currentrods.currentrods.int__content ) + (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram reactor.ads:42 *)
  ;
   assume {  (Reactor__power___axiom.dynamic_invariant Reactor__currentpowerstatus.currentpowerstatus.int__content True False True True) };
   assume {  (Reactor__controlrods___axiom.dynamic_invariant Reactor__currentrods.currentrods.int__content True False True True) };
   assume {  (Reactor__temperatureincrease___axiom.dynamic_invariant Reactor__currenttemperatureincrease.currenttemperatureincrease.int__content True False True True) };
   assume {  (Reactor__reactorpower___axiom.dynamic_invariant Reactor__currentreactorpower.currentreactorpower.int__content True False True True) };
   assume {  (Reactor__electricity___axiom.dynamic_invariant Reactor__currentmaxelectricity.currentmaxelectricity.int__content False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram reactor.ads:42 *)
  ;
  () (* Check for RTE in the Pre of the subprogram reactor.ads:42 *)
  ;
   begin ensures {true} let _ = (let _ = (Reactor__currentrods.currentrods.int__content < (5 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram reactor.ads:42 *)
  ;
   assume {  ( [@GP_Pretty_Ada:18705] (Reactor__currentrods.currentrods.int__content < (5 : int)) ) };
   begin ensures {true} let _ = (let _ = Reactor__currentrods.currentrods.int__content in (
   ()))
   in () end ;
  (let temp___old_224 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = Reactor__currentrods.currentrods.int__content)} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:reactor.adb:43:7] ([#"reactor.adb" 43 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:43:22] ([#"reactor.adb" 43 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:43:19] ([#"reactor.adb" 43 0 0] [#"reactor.adb" 43 0 0] (Reactor__currentrods.currentrods.int__content <- ( ([#"reactor.adb" 43 0 0] ( [@vc:annotation] [@GP_Sloc:reactor.adb:43:33] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:currentrods_assign__add] [@comment:      currentRods := currentRods+1;                                 ^ reactor.adb:43:33:VC_RANGE_CHECK] [@GP_Id:9] (Reactor__controlrods.range_check_((Reactor__currentrods.currentrods.int__content + (1 : int)))) )) ))) );
    ( [@GP_Sloc:reactor.adb:45:9] ([#"reactor.adb" 45 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:45:6] ([#"reactor.adb" 45 0 0] (if (( ([#"reactor.adb" 45 0 0] [#"reactor.adb" 45 0 0] (([@branch_id=2445] Main.spark__branch).bool__content <- ( (Reactor__currenttemperatureincrease.currenttemperatureincrease.int__content > (0 : int)) )));
    ( [@branch_id=2445] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:reactor.adb:46:9] ([#"reactor.adb" 46 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:46:39] ([#"reactor.adb" 46 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:46:36] ([#"reactor.adb" 46 0 0] [#"reactor.adb" 46 0 0] (Reactor__currenttemperatureincrease.currenttemperatureincrease.int__content <- ( ([#"reactor.adb" 46 0 0] ( [@GP_Id:10] [@comment:        currentTemperatureIncrease := currentTemperatureIncrease-1;                                                                 ^ reactor.adb:46:65:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__currenttemperatureincrease_assign__sub] [@GP_Sloc:reactor.adb:46:65] (Reactor__temperatureincrease.range_check_((Reactor__currenttemperatureincrease.currenttemperatureincrease.int__content - (1 : int)))) )) ))) ) )) else (
     ()))) );
    ( [@GP_Sloc:reactor.adb:49:9] ([#"reactor.adb" 49 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:49:6] ([#"reactor.adb" 49 0 0] (if (( ([#"reactor.adb" 49 0 0] [#"reactor.adb" 49 0 0] (([@branch_id=2456] Main.spark__branch).bool__content <- ( (Reactor__currentreactorpower.currentreactorpower.int__content > (0 : int)) )));
    ( [@branch_id=2456] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:reactor.adb:50:9] ([#"reactor.adb" 50 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:50:32] ([#"reactor.adb" 50 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:50:29] ([#"reactor.adb" 50 0 0] [#"reactor.adb" 50 0 0] (Reactor__currentreactorpower.currentreactorpower.int__content <- ( ([#"reactor.adb" 50 0 0] ( [@GP_Id:11] [@comment:        currentReactorPower := currentReactorPower-1;                                                   ^ reactor.adb:50:51:VC_RANGE_CHECK] [@GP_Shape:if__currentreactorpower_assign__sub] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:reactor.adb:50:51] (Reactor__reactorpower.range_check_((Reactor__currentreactorpower.currentreactorpower.int__content - (1 : int)))) )) ))) ) )) else (
     ()))) );
    ( [@GP_Sloc:reactor.adb:53:10] ([#"reactor.adb" 53 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:53:7] ([#"reactor.adb" 53 0 0] (if (( ([#"reactor.adb" 53 0 0] [#"reactor.adb" 53 0 0] (([@branch_id=2467] Main.spark__branch).bool__content <- ( (Reactor__reactoron___axiom.reactoron(())) )));
    ( [@branch_id=2467] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:reactor.adb:54:10] ([#"reactor.adb" 54 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:54:54] ([#"reactor.adb" 54 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:54:32] ([#"reactor.adb" 54 0 0] [#"reactor.adb" 54 0 0] (Reactor__currentmaxelectricity.currentmaxelectricity.int__content <- ( ([#"reactor.adb" 54 0 0] ( [@GP_Id:13] [@GP_Sloc:reactor.adb:54:52] [@GP_Shape:if__currentmaxelectricity_assign__div] [@vc:annotation] [@comment:         currentMaxElectricity := Electricity'Last / currentRods;                                                    ^ reactor.adb:54:52:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] (Reactor__electricity.range_check_(([#"reactor.adb" 54 0 0] ( [@GP_Id:12] [@GP_Sloc:reactor.adb:54:52] [@GP_Shape:if__currentmaxelectricity_assign__div] [@vc:annotation] [@GP_Reason:VC_DIVISION_CHECK] [@comment:         currentMaxElectricity := Electricity'Last / currentRods;                                                    ^ reactor.adb:54:52:VC_DIVISION_CHECK] (Int_Division.div_((200 : int)) (Reactor__currentrods.currentrods.int__content)) )))) )) ))) ) )) else (
     ( ();
     ( [@GP_Sloc:reactor.adb:56:10] ([#"reactor.adb" 56 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:56:32] ([#"reactor.adb" 56 0 0] [#"reactor.adb" 56 0 0] (Reactor__currentmaxelectricity.currentmaxelectricity.int__content <- ( (0 : int) ))) ) )))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = (Reactor__currentrods.currentrods.int__content = (temp___old_224 + (1 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "increasetemperature" defined at reactor.ads:47, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Reactor__increasetemperature__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Reactor__currentpowerstatus as Reactor__currentpowerstatus
 use        Reactor__currenttemperature as Reactor__currenttemperature
 use        Reactor__currenttemperatureincrease as Reactor__currenttemperatureincrease
 use        Reactor__reactoron___axiom as Reactor__reactoron___axiom
 use        Reactor__increasetemperature__temp as Reactor__increasetemperature__temp
 use        Reactor__temperature as Reactor__temperature
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__temperatureincrease___axiom as Reactor__temperatureincrease___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__temperatureincrease___axiom as Reactor__temperatureincrease___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__currentpowerstatus___axiom as Reactor__currentpowerstatus___axiom
 use        Reactor__currenttemperature___axiom as Reactor__currenttemperature___axiom
 use        Reactor__currenttemperatureincrease___axiom as Reactor__currenttemperatureincrease___axiom
 use        Reactor__reactoron___axiom as Reactor__reactoron___axiom
 use        Reactor__increasetemperature__temp___axiom as Reactor__increasetemperature__temp___axiom

 let def [#"reactor.ads" 47 0 0][@GP_Subp:reactor.ads:47] 
   (__void_param : unit)
  requires { [#"reactor.ads" 47 0 0] true }
  ensures { [#"reactor.ads" 47 0 0] ([#"reactor.ads" 50 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:16] [@GP_Shape:pragargs__cmp] [@comment:     Post => currentTemperature >= currentTemperature'Old;              ^ reactor.ads:50:14:VC_POSTCONDITION] [@model_vc_post] [@GP_Sloc:reactor.ads:50:14] ( [@GP_Pretty_Ada:18769] [@GP_Sloc:reactor.ads:50:14] (Reactor__currenttemperature.currenttemperature.int__content >= (old Reactor__currenttemperature.currenttemperature.int__content )) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram reactor.ads:47 *)
  ;
   assume {  (Reactor__power___axiom.dynamic_invariant Reactor__currentpowerstatus.currentpowerstatus.int__content True False True True) };
   assume {  (Reactor__temperature___axiom.dynamic_invariant Reactor__currenttemperature.currenttemperature.int__content True False True True) };
   assume {  (Reactor__temperatureincrease___axiom.dynamic_invariant Reactor__currenttemperatureincrease.currenttemperatureincrease.int__content True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant Reactor__increasetemperature__temp.temp.int__content False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram reactor.ads:47 *)
  ;
  () (* Check for RTE in the Pre of the subprogram reactor.ads:47 *)
  ;
   begin ensures {true} let _ = (let _ = (Reactor__currenttemperature.currenttemperature.int__content < (100 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram reactor.ads:47 *)
  ;
   assume {  ( [@GP_Pretty_Ada:18758] (Reactor__currenttemperature.currenttemperature.int__content < (100 : int)) ) };
   begin ensures {true} let _ = (let _ = Reactor__currenttemperature.currenttemperature.int__content in (
   ()))
   in () end ;
  (let temp___old_225 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = Reactor__currenttemperature.currenttemperature.int__content)} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:reactor.adb:62:15] ([#"reactor.adb" 62 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:62:36] ([#"reactor.adb" 62 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:62:12] ([#"reactor.adb" 62 0 0] [#"reactor.adb" 62 0 0] (Reactor__increasetemperature__temp.temp.int__content <- ( (Reactor__currenttemperature.currenttemperature.int__content + Reactor__currenttemperatureincrease.currenttemperatureincrease.int__content) ))) );
    ( [@GP_Sloc:reactor.adb:63:10] ([#"reactor.adb" 63 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:63:7] ([#"reactor.adb" 63 0 0] (if (( ([#"reactor.adb" 63 0 0] [#"reactor.adb" 63 0 0] (([@branch_id=2506] Main.spark__branch).bool__content <- ( (Reactor__reactoron___axiom.reactoron(())) )));
    ( [@branch_id=2506] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:reactor.adb:64:10] ([#"reactor.adb" 64 0 0] (if (( ([#"reactor.adb" 64 0 0] [#"reactor.adb" 64 0 0] (([@branch_id=2508] Main.spark__branch).bool__content <- ( (Reactor__increasetemperature__temp.temp.int__content > (100 : int)) )));
     ( [@branch_id=2508] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:reactor.adb:65:13] ([#"reactor.adb" 65 0 0] ()) );
      ( [@GP_Sloc:reactor.adb:65:32] ([#"reactor.adb" 65 0 0] [#"reactor.adb" 65 0 0] (Reactor__currenttemperature.currenttemperature.int__content <- ( (100 : int) ))) ) )) else (
      ( ();
      ( [@GP_Sloc:reactor.adb:67:13] ([#"reactor.adb" 67 0 0] ()) );
      ( [@GP_Sloc:reactor.adb:67:32] ([#"reactor.adb" 67 0 0] [#"reactor.adb" 67 0 0] (Reactor__currenttemperature.currenttemperature.int__content <- ( ([#"reactor.adb" 67 0 0] ( [@GP_Id:15] [@GP_Sloc:reactor.adb:67:35] [@GP_Shape:if__if__currenttemperature_assign] [@comment:            currentTemperature := temp;                                   ^ reactor.adb:67:35:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] (Reactor__temperature.range_check_(Reactor__increasetemperature__temp.temp.int__content)) )) ))) ) )))) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = (Reactor__currenttemperature.currenttemperature.int__content >= temp___old_225) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "decreasetemperature" defined at reactor.ads:52, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Reactor__decreasetemperature__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Int_Division as Int_Division
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Reactor__currentwatersupply as Reactor__currentwatersupply
 use        Reactor__currenttemperature as Reactor__currenttemperature
 use        Reactor__decreasetemperature__temp as Reactor__decreasetemperature__temp
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom
 use        Reactor__temperature as Reactor__temperature
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom
 use        Reactor__temperature___axiom as Reactor__temperature___axiom
 use        Reactor__currentwatersupply___axiom as Reactor__currentwatersupply___axiom
 use        Reactor__currenttemperature___axiom as Reactor__currenttemperature___axiom
 use        Reactor__decreasetemperature__temp___axiom as Reactor__decreasetemperature__temp___axiom

 let def [#"reactor.ads" 52 0 0][@GP_Subp:reactor.ads:52] 
   (__void_param : unit)
  requires { [#"reactor.ads" 52 0 0] true }
  ensures { [#"reactor.ads" 52 0 0] ([#"reactor.ads" 55 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@model_vc_post] [@GP_Id:20] [@GP_Sloc:reactor.ads:55:14] [@comment:     Post => currentTemperature <= currentTemperature'Old;              ^ reactor.ads:55:14:VC_POSTCONDITION] ( [@GP_Pretty_Ada:18818] [@GP_Sloc:reactor.ads:55:14] (Reactor__currenttemperature.currenttemperature.int__content <= (old Reactor__currenttemperature.currenttemperature.int__content )) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram reactor.ads:52 *)
  ;
   assume {  (Reactor__watersupply___axiom.dynamic_invariant Reactor__currentwatersupply.currentwatersupply.int__content True False True True) };
   assume {  (Reactor__temperature___axiom.dynamic_invariant Reactor__currenttemperature.currenttemperature.int__content True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant Reactor__decreasetemperature__temp.temp.int__content False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram reactor.ads:52 *)
  ;
  () (* Check for RTE in the Pre of the subprogram reactor.ads:52 *)
  ;
   begin ensures {true} let _ = (let _ = (Reactor__currenttemperature.currenttemperature.int__content > (0 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram reactor.ads:52 *)
  ;
   assume {  ( [@GP_Pretty_Ada:18807] (Reactor__currenttemperature.currenttemperature.int__content > (0 : int)) ) };
   begin ensures {true} let _ = (let _ = Reactor__currenttemperature.currenttemperature.int__content in (
   ()))
   in () end ;
  (let temp___old_226 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = Reactor__currenttemperature.currenttemperature.int__content)} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:reactor.adb:74:12] ([#"reactor.adb" 74 0 0] [#"reactor.adb" 74 0 0] (Reactor__decreasetemperature__temp.temp.int__content <- ( (0 : int) ))) );
    ( [@GP_Sloc:reactor.adb:75:10] ([#"reactor.adb" 75 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:75:7] ([#"reactor.adb" 75 0 0] (if (( ([#"reactor.adb" 75 0 0] [#"reactor.adb" 75 0 0] (([@branch_id=2545] Main.spark__branch).bool__content <- ( (Reactor__currentwatersupply.currentwatersupply.int__content >= (10 : int)) )));
    ( [@branch_id=2545] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:reactor.adb:76:18] ([#"reactor.adb" 76 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:76:39] ([#"reactor.adb" 76 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:76:15] ([#"reactor.adb" 76 0 0] [#"reactor.adb" 76 0 0] (Reactor__decreasetemperature__temp.temp.int__content <- ( (Reactor__currenttemperature.currenttemperature.int__content - ([#"reactor.adb" 76 0 0] ( [@GP_Id:17] [@GP_Sloc:reactor.adb:76:57] [@vc:annotation] [@GP_Reason:VC_DIVISION_CHECK] [@comment:         temp := currentTemperature - currentWaterSupply/15;                                                         ^ reactor.adb:76:57:VC_DIVISION_CHECK] [@GP_Shape:if__temp_assign__sub__div] (Int_Division.div_(Reactor__currentwatersupply.currentwatersupply.int__content) ((15 : int))) ))) ))) );
     ( [@GP_Sloc:reactor.adb:77:10] ([#"reactor.adb" 77 0 0] (if (( ([#"reactor.adb" 77 0 0] [#"reactor.adb" 77 0 0] (([@branch_id=2556] Main.spark__branch).bool__content <- ( (Reactor__decreasetemperature__temp.temp.int__content < (0 : int)) )));
     ( [@branch_id=2556] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:reactor.adb:78:13] ([#"reactor.adb" 78 0 0] ()) );
      ( [@GP_Sloc:reactor.adb:78:32] ([#"reactor.adb" 78 0 0] [#"reactor.adb" 78 0 0] (Reactor__currenttemperature.currenttemperature.int__content <- ( (0 : int) ))) ) )) else (
      ( ();
      ( [@GP_Sloc:reactor.adb:80:13] ([#"reactor.adb" 80 0 0] ()) );
      ( [@GP_Sloc:reactor.adb:80:32] ([#"reactor.adb" 80 0 0] [#"reactor.adb" 80 0 0] (Reactor__currenttemperature.currenttemperature.int__content <- ( ([#"reactor.adb" 80 0 0] ( [@GP_Id:18] [@comment:            currentTemperature := temp;                                   ^ reactor.adb:80:35:VC_RANGE_CHECK] [@GP_Shape:if__if__currenttemperature_assign] [@vc:annotation] [@GP_Sloc:reactor.adb:80:35] [@GP_Reason:VC_RANGE_CHECK] (Reactor__temperature.range_check_(Reactor__decreasetemperature__temp.temp.int__content)) )) ))) ) )))) ) )) else (
     ( ();
     ( [@GP_Sloc:reactor.adb:83:10] ([#"reactor.adb" 83 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:83:32] ([#"reactor.adb" 83 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:83:29] ([#"reactor.adb" 83 0 0] [#"reactor.adb" 83 0 0] (Reactor__currenttemperature.currenttemperature.int__content <- ( ([#"reactor.adb" 83 0 0] ( [@GP_Sloc:reactor.adb:83:50] [@GP_Id:19] [@comment:         currentTemperature := currentTemperature-1;                                                  ^ reactor.adb:83:50:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__currenttemperature_assign__sub] (Reactor__temperature.range_check_((Reactor__currenttemperature.currenttemperature.int__content - (1 : int)))) )) ))) ) )))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = (Reactor__currenttemperature.currenttemperature.int__content <= temp___old_226) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "increaseelectricity" defined at reactor.ads:57, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Reactor__increaseelectricity__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Reactor__currentreactorpower as Reactor__currentreactorpower
 use        Reactor__currentelectricityproduced as Reactor__currentelectricityproduced
 use        Reactor__currentmaxelectricity as Reactor__currentmaxelectricity
 use        Reactor__increaseelectricity__elec as Reactor__increaseelectricity__elec
 use        Reactor__reactorpower___axiom as Reactor__reactorpower___axiom
 use        Reactor__electricity as Reactor__electricity
 use        Reactor__electricity___axiom as Reactor__electricity___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Reactor__reactorpower___axiom as Reactor__reactorpower___axiom
 use        Reactor__electricity___axiom as Reactor__electricity___axiom
 use        Reactor__currentreactorpower___axiom as Reactor__currentreactorpower___axiom
 use        Reactor__currentelectricityproduced___axiom as Reactor__currentelectricityproduced___axiom
 use        Reactor__currentmaxelectricity___axiom as Reactor__currentmaxelectricity___axiom
 use        Reactor__increaseelectricity__elec___axiom as Reactor__increaseelectricity__elec___axiom

 let def [#"reactor.ads" 57 0 0][@GP_Subp:reactor.ads:57] 
   (__void_param : unit)
  requires { [#"reactor.ads" 57 0 0] true }
  ensures { [#"reactor.ads" 57 0 0] ([#"reactor.ads" 60 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => currentElectricityProduced = currentElectricityProduced'Old+currentReactorPower or currentElectricityProduced = currentMaxElectricity;              ^ reactor.ads:60:14:VC_POSTCONDITION] [@GP_Shape:pragargs__or] [@model_vc_post] [@GP_Id:22] [@GP_Sloc:reactor.ads:60:14] ( [@GP_Sloc:reactor.ads:60:14] [@GP_Pretty_Ada:18874] ( (Reactor__currentelectricityproduced.currentelectricityproduced.int__content = ((old Reactor__currentelectricityproduced.currentelectricityproduced.int__content ) + Reactor__currentreactorpower.currentreactorpower.int__content)) \/ (Reactor__currentelectricityproduced.currentelectricityproduced.int__content = Reactor__currentmaxelectricity.currentmaxelectricity.int__content) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram reactor.ads:57 *)
  ;
   assume {  (Reactor__reactorpower___axiom.dynamic_invariant Reactor__currentreactorpower.currentreactorpower.int__content True False True True) };
   assume {  (Reactor__electricity___axiom.dynamic_invariant Reactor__currentelectricityproduced.currentelectricityproduced.int__content True False True True) };
   assume {  (Reactor__electricity___axiom.dynamic_invariant Reactor__currentmaxelectricity.currentmaxelectricity.int__content True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant Reactor__increaseelectricity__elec.elec.int__content False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram reactor.ads:57 *)
  ;
  () (* Check for RTE in the Pre of the subprogram reactor.ads:57 *)
  ;
   begin ensures {true} let _ = (let _ = (Reactor__currentelectricityproduced.currentelectricityproduced.int__content <= Reactor__currentmaxelectricity.currentmaxelectricity.int__content) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram reactor.ads:57 *)
  ;
   assume {  ( [@GP_Pretty_Ada:18857] (Reactor__currentelectricityproduced.currentelectricityproduced.int__content <= Reactor__currentmaxelectricity.currentmaxelectricity.int__content) ) };
   begin ensures {true} let _ = (let _ = Reactor__currentelectricityproduced.currentelectricityproduced.int__content in (
   ()))
   in () end ;
  (let temp___old_227 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = Reactor__currentelectricityproduced.currentelectricityproduced.int__content)} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:reactor.adb:89:14] ([#"reactor.adb" 89 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:89:43] ([#"reactor.adb" 89 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:89:11] ([#"reactor.adb" 89 0 0] [#"reactor.adb" 89 0 0] (Reactor__increaseelectricity__elec.elec.int__content <- ( (Reactor__currentelectricityproduced.currentelectricityproduced.int__content + Reactor__currentreactorpower.currentreactorpower.int__content) ))) );
    ( [@GP_Sloc:reactor.adb:90:17] ([#"reactor.adb" 90 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:90:6] ([#"reactor.adb" 90 0 0] (if (( ([#"reactor.adb" 90 0 0] [#"reactor.adb" 90 0 0] (([@branch_id=2600] Main.spark__branch).bool__content <- ( (Reactor__increaseelectricity__elec.elec.int__content >= Reactor__currentmaxelectricity.currentmaxelectricity.int__content) )));
    ( [@branch_id=2600] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:reactor.adb:91:9] ([#"reactor.adb" 91 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:91:39] ([#"reactor.adb" 91 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:91:36] ([#"reactor.adb" 91 0 0] [#"reactor.adb" 91 0 0] (Reactor__currentelectricityproduced.currentelectricityproduced.int__content <- ( Reactor__currentmaxelectricity.currentmaxelectricity.int__content ))) ) )) else (
     ( ();
     ( [@GP_Sloc:reactor.adb:93:9] ([#"reactor.adb" 93 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:93:36] ([#"reactor.adb" 93 0 0] [#"reactor.adb" 93 0 0] (Reactor__currentelectricityproduced.currentelectricityproduced.int__content <- ( ([#"reactor.adb" 93 0 0] ( [@vc:annotation] [@comment:        currentElectricityProduced := elec;                                       ^ reactor.adb:93:39:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:21] [@GP_Sloc:reactor.adb:93:39] [@GP_Shape:if__currentelectricityproduced_assign] (Reactor__electricity.range_check_(Reactor__increaseelectricity__elec.elec.int__content)) )) ))) ) )))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = (Boolean.orb((Reactor__currentelectricityproduced.currentelectricityproduced.int__content = (temp___old_227 + Reactor__currentreactorpower.currentreactorpower.int__content))) ((Reactor__currentelectricityproduced.currentelectricityproduced.int__content = Reactor__currentmaxelectricity.currentmaxelectricity.int__content))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "decreasewatersupply" defined at reactor.ads:62, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Reactor__decreasewatersupply__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Reactor__currentpowerstatus as Reactor__currentpowerstatus
 use        Reactor__currentwatersupply as Reactor__currentwatersupply
 use        Reactor__reactoron as Reactor__reactoron
 use        Reactor__reactoron___axiom as Reactor__reactoron___axiom
 use        Reactor__watersupply as Reactor__watersupply
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom
 use        Reactor__power___axiom as Reactor__power___axiom
 use        Reactor__currentpowerstatus___axiom as Reactor__currentpowerstatus___axiom
 use        Reactor__currentwatersupply___axiom as Reactor__currentwatersupply___axiom
 use        Reactor__reactoron___axiom as Reactor__reactoron___axiom

 let def [#"reactor.ads" 62 0 0][@GP_Subp:reactor.ads:62] 
   (__void_param : unit)
  requires { [#"reactor.ads" 62 0 0] true }
  ensures { [#"reactor.ads" 62 0 0] ([#"reactor.ads" 65 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@comment:     Post => currentWaterSupply = currentWaterSupply'Old-1;              ^ reactor.ads:65:14:VC_POSTCONDITION] [@model_vc_post] [@GP_Sloc:reactor.ads:65:14] [@GP_Id:24] ( [@GP_Pretty_Ada:18926] [@GP_Sloc:reactor.ads:65:14] (Reactor__currentwatersupply.currentwatersupply.int__content = ((old Reactor__currentwatersupply.currentwatersupply.int__content ) - (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram reactor.ads:62 *)
  ;
   assume {  (Reactor__power___axiom.dynamic_invariant Reactor__currentpowerstatus.currentpowerstatus.int__content True False True True) };
   assume {  (Reactor__watersupply___axiom.dynamic_invariant Reactor__currentwatersupply.currentwatersupply.int__content True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram reactor.ads:62 *)
  ;
  () (* Check for RTE in the Pre of the subprogram reactor.ads:62 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Reactor__currentwatersupply.currentwatersupply.int__content > (0 : int))) ((Reactor__reactoron___axiom.reactoron(())))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram reactor.ads:62 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:3235] (Reactor__currentwatersupply.currentwatersupply.int__content > (0 : int)) ) /\ ( [@GP_Pretty_Ada:3236] ((epsilon temp___result_229 : bool.
   ( (temp___result_229 = (Reactor__reactoron.reactoron Reactor__currentpowerstatus.currentpowerstatus.int__content)) /\ (Reactor__reactoron.reactoron__function_guard temp___result_229 Reactor__currentpowerstatus.currentpowerstatus.int__content) )) = True) ) ) };
   begin ensures {true} let _ = (let _ = Reactor__currentwatersupply.currentwatersupply.int__content in (
   ()))
   in () end ;
  (let temp___old_228 [@mlw:proxy_symbol] [@introduced] =  (val _f : int
  ensures { (result = Reactor__currentwatersupply.currentwatersupply.int__content)} 
  in _f) in (
   (  try
    ( ();
    ( [@GP_Sloc:reactor.adb:99:10] ([#"reactor.adb" 99 0 0] ()) );
    ( [@GP_Sloc:reactor.adb:99:7] ([#"reactor.adb" 99 0 0] (if (( ([#"reactor.adb" 99 0 0] [#"reactor.adb" 99 0 0] (([@branch_id=2621] Main.spark__branch).bool__content <- ( (Reactor__reactoron___axiom.reactoron(())) )));
    ( [@branch_id=2621] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:reactor.adb:100:10] ([#"reactor.adb" 100 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:100:32] ([#"reactor.adb" 100 0 0] ()) );
     ( [@GP_Sloc:reactor.adb:100:29] ([#"reactor.adb" 100 0 0] [#"reactor.adb" 100 0 0] (Reactor__currentwatersupply.currentwatersupply.int__content <- ( ([#"reactor.adb" 100 0 0] ( [@GP_Sloc:reactor.adb:100:51] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:         currentWaterSupply := currentWaterSupply -1;                                                   ^ reactor.adb:100:51:VC_RANGE_CHECK] [@GP_Id:23] [@GP_Shape:if__currentwatersupply_assign__sub] (Reactor__watersupply.range_check_((Reactor__currentwatersupply.currentwatersupply.int__content - (1 : int)))) )) ))) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    begin ensures {true} let _ = (let _ = (Reactor__currentwatersupply.currentwatersupply.int__content = (temp___old_228 - (1 : int))) in (
    ()))
    in () end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "fillwatersupply" defined at reactor.ads:67, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Reactor__fillwatersupply__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Reactor__currentwatersupply as Reactor__currentwatersupply
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom
 use        Reactor__watersupply___axiom as Reactor__watersupply___axiom
 use        Reactor__currentwatersupply___axiom as Reactor__currentwatersupply___axiom

 let def [#"reactor.ads" 67 0 0][@GP_Subp:reactor.ads:67] 
   (__void_param : unit)
  requires { [#"reactor.ads" 67 0 0] true }
  ensures { [#"reactor.ads" 67 0 0] ([#"reactor.ads" 70 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@model_vc_post] [@GP_Sloc:reactor.ads:70:14] [@GP_Id:25] [@comment:     Post => currentWaterSupply = WaterSupply'Last;              ^ reactor.ads:70:14:VC_POSTCONDITION] ( [@GP_Pretty_Ada:18972] [@GP_Sloc:reactor.ads:70:14] (Reactor__currentwatersupply.currentwatersupply.int__content = (100 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram reactor.ads:67 *)
  ;
   assume {  (Reactor__watersupply___axiom.dynamic_invariant Reactor__currentwatersupply.currentwatersupply.int__content True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram reactor.ads:67 *)
  ;
  () (* Check for RTE in the Pre of the subprogram reactor.ads:67 *)
  ;
   begin ensures {true} let _ = (let _ = (Reactor__currentwatersupply.currentwatersupply.int__content < (100 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram reactor.ads:67 *)
  ;
   assume {  ( [@GP_Pretty_Ada:18961] (Reactor__currentwatersupply.currentwatersupply.int__content < (100 : int)) ) };
   try
   ( ();
   ( [@GP_Sloc:reactor.adb:106:7] ([#"reactor.adb" 106 0 0] ()) );
   ( [@GP_Sloc:reactor.adb:106:26] ([#"reactor.adb" 106 0 0] [#"reactor.adb" 106 0 0] (Reactor__currentwatersupply.currentwatersupply.int__content <- ( (100 : int) ))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Reactor__currentwatersupply.currentwatersupply.int__content = (100 : int)) in (
   ()))
   in () end  )
end
